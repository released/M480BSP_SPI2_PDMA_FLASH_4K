; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\led_function.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\led_function.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\led_function.crf ..\LED_Function.c]
                          THUMB

                          AREA ||i.CLK_SysTickDelay||, CODE, READONLY, ALIGN=2

                  CLK_SysTickDelay PROC
;;;612      */
;;;613    __STATIC_INLINE void CLK_SysTickDelay(uint32_t us)
000000  4907              LDR      r1,|L1.32|
;;;614    {
;;;615        SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  f04f21e0          MOV      r1,#0xe000e000
00000a  6148              STR      r0,[r1,#0x14]
;;;616        SysTick->VAL  = 0x0UL;
00000c  2200              MOVS     r2,#0
00000e  618a              STR      r2,[r1,#0x18]
;;;617        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
000010  2005              MOVS     r0,#5
000012  6108              STR      r0,[r1,#0x10]
                  |L1.20|
;;;618    
;;;619        /* Waiting for down-count to zero */
;;;620        while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0UL)
000014  6908              LDR      r0,[r1,#0x10]
000016  03c0              LSLS     r0,r0,#15
000018  d5fc              BPL      |L1.20|
;;;621        {
;;;622        }
;;;623    
;;;624        /* Disable SysTick counter */
;;;625        SysTick->CTRL = 0UL;
00001a  610a              STR      r2,[r1,#0x10]
;;;626    }
00001c  4770              BX       lr
;;;627    
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      CyclesPerUs

                          AREA ||i.LED_CheckDriverID||, CODE, READONLY, ALIGN=2

                  LED_CheckDriverID PROC
;;;440    *****************************************************************************/
;;;441    uint8_t LED_CheckDriverID(uint8_t idx)
000000  b500              PUSH     {lr}
;;;442    {
;;;443    	SPI_R_NBYTE(idx, FUNCTION_PAGE, DRIVER_ID_REG, 1);
000002  2301              MOVS     r3,#1
000004  2211              MOVS     r2,#0x11
000006  2103              MOVS     r1,#3
000008  f7fffffe          BL       SPI_R_NBYTE
;;;444    	if(b_arySPI_Rx_FIFO[0]==SNLED2735_ID)
00000c  4803              LDR      r0,|L2.28|
00000e  7800              LDRB     r0,[r0,#0]  ; b_arySPI_Rx_FIFO
000010  288a              CMP      r0,#0x8a
000012  d001              BEQ      |L2.24|
;;;445    	{
;;;446    		return ID_CHECK_PASS;
;;;447    	}
;;;448    	else
;;;449    	{
;;;450    		return ID_CHECK_FAIL;
000014  2000              MOVS     r0,#0
;;;451    	}
;;;452    }
000016  bd00              POP      {pc}
                  |L2.24|
000018  2001              MOVS     r0,#1                 ;446
00001a  bd00              POP      {pc}
;;;453    
                          ENDP

                  |L2.28|
                          DCD      ||.bss||+0xc0

                          AREA ||i.LED_PWMUpdate||, CODE, READONLY, ALIGN=2

                  LED_PWMUpdate PROC
;;;569    
;;;570    void LED_PWMUpdate(volatile uint8_t bPWM_Index,volatile uint8_t bPWM_R_Value,volatile uint8_t bPWM_G_Value,volatile uint8_t bPWM_B_Value)
000000  b50f              PUSH     {r0-r3,lr}
;;;571    {
000002  b083              SUB      sp,sp,#0xc
;;;572    	volatile uint32_t  wLED_RedIndex, wLED_GreenIndex, wLED_BlueIndex;
;;;573    	if(bPWM_Index != LED_RESERVED)
000004  f89d000c          LDRB     r0,[sp,#0xc]
000008  28ff              CMP      r0,#0xff
00000a  d01d              BEQ      |L3.72|
;;;574    	{
;;;575    		//** RGB LED placement on layout
;;;576    		wLED_RedIndex 	= b_tabRedLED_PWM_Location[bPWM_Index];			
00000c  480f              LDR      r0,|L3.76|
00000e  f89d100c          LDRB     r1,[sp,#0xc]
000012  5c40              LDRB     r0,[r0,r1]
;;;577    		wLED_GreenIndex = b_tabGreenLED_PWM_Location[bPWM_Index];		
000014  9000              STR      r0,[sp,#0]
000016  480d              LDR      r0,|L3.76|
000018  f89d100c          LDRB     r1,[sp,#0xc]
00001c  3040              ADDS     r0,r0,#0x40
00001e  5c40              LDRB     r0,[r0,r1]
;;;578    		wLED_BlueIndex	=	b_tabBlueLED_PWM_Location[bPWM_Index];
000020  9001              STR      r0,[sp,#4]
000022  480a              LDR      r0,|L3.76|
000024  f89d100c          LDRB     r1,[sp,#0xc]
000028  3080              ADDS     r0,r0,#0x80
00002a  5c40              LDRB     r0,[r0,r1]
;;;579    
;;;580    		b_arySPI_Tx_FIFO[wLED_RedIndex]  = bPWM_R_Value  ;		
00002c  f89d1010          LDRB     r1,[sp,#0x10]
000030  9002              STR      r0,[sp,#8]
000032  4807              LDR      r0,|L3.80|
000034  9a00              LDR      r2,[sp,#0]
000036  5481              STRB     r1,[r0,r2]
;;;581    		b_arySPI_Tx_FIFO[wLED_GreenIndex] = bPWM_G_Value ;		
000038  f89d1014          LDRB     r1,[sp,#0x14]
00003c  9a01              LDR      r2,[sp,#4]
00003e  5481              STRB     r1,[r0,r2]
;;;582    		b_arySPI_Tx_FIFO[wLED_BlueIndex] = bPWM_B_Value ;			
000040  f89d1018          LDRB     r1,[sp,#0x18]
000044  9a02              LDR      r2,[sp,#8]
000046  5481              STRB     r1,[r0,r2]
                  |L3.72|
;;;583    	}	
;;;584    }
000048  b007              ADD      sp,sp,#0x1c
00004a  bd00              POP      {pc}
;;;585    
                          ENDP

                  |L3.76|
                          DCD      ||.constdata||+0x40
                  |L3.80|
                          DCD      ||.bss||

                          AREA ||i.LED_SNLED2735Init||, CODE, READONLY, ALIGN=2

                  LED_SNLED2735Init PROC
;;;349    
;;;350    void LED_SNLED2735Init(uint8_t idx)
000000  b5f8              PUSH     {r3-r7,lr}
;;;351    {
;;;352    	volatile uint32_t i,j;
;;;353    	
;;;354    	/*
;;;355    		Mode selection pin for I2C or SPI interface. Input only pin. 
;;;356    		I2C mode: MSEL tie GND. 
;;;357    		SPI mode: MSEL tie VDD. 
;;;358    	*/
;;;359    	
;;;360    
;;;361    	/*
;;;362    		Schmitt trigger structure as input mode only.   
;;;363    		Hardware power down the chip when pull to low. 
;;;364    	*/
;;;365    	SPI_SNLED27351_POWERON;
000002  493a              LDR      r1,|L4.236|
000004  4606              MOV      r6,r0                 ;351
000006  2001              MOVS     r0,#1
000008  6008              STR      r0,[r1,#0]
;;;366    	
;;;367        CLK_SysTickDelay(25000);
00000a  f24610a8          MOV      r0,#0x61a8
00000e  f7fffffe          BL       CLK_SysTickDelay
;;;368    	
;;;369    	//** Select to function page
;;;370    	//** Setting LED driver to shutdown mode
;;;371    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_SHUT_DOWN_MODE);
000012  2300              MOVS     r3,#0
000014  461a              MOV      r2,r3
000016  2103              MOVS     r1,#3
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       SPI_W_3BYTE
;;;372    	//** Setting internal channel pulldown/pullup
;;;373    	SPI_W_3BYTE(idx, FUNCTION_PAGE,PDU_REG, mskSET_CA_CB_CHANNEL);
00001e  23aa              MOVS     r3,#0xaa
000020  2213              MOVS     r2,#0x13
000022  2103              MOVS     r1,#3
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       SPI_W_3BYTE
;;;374    	//** Select number of scan phase
;;;375    	SPI_W_3BYTE(idx, FUNCTION_PAGE,SCAN_PHASE_REG, mskPHASE_12CHANNEL);
00002a  2300              MOVS     r3,#0
00002c  2214              MOVS     r2,#0x14
00002e  2103              MOVS     r1,#3
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       SPI_W_3BYTE
;;;376    	//** Setting PWM Delay Phase
;;;377    	SPI_W_3BYTE(idx, FUNCTION_PAGE,SLEW_RATE_CONTROL_MODE1_REG, mskPWM_DELAY_PHASE_ENABLE);
000036  2304              MOVS     r3,#4
000038  2215              MOVS     r2,#0x15
00003a  2103              MOVS     r1,#3
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       SPI_W_3BYTE
;;;378    	//** Setting Driving/Sinking Channel Slew Rate
;;;379    	SPI_W_3BYTE(idx, FUNCTION_PAGE,SLEW_RATE_CONTROL_MODE2_REG, mskDRIVING_SINKING_CHHANNEL_SLEWRATE_ENABLE);
000042  23c0              MOVS     r3,#0xc0
000044  2216              MOVS     r2,#0x16
000046  2103              MOVS     r1,#3
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       SPI_W_3BYTE
;;;380    	//** Setting Iref
;;;381    	SPI_W_3BYTE(idx, FUNCTION_PAGE,SOFTWARE_SLEEP_REG, mskSLEEP_DISABLE);	
00004e  2300              MOVS     r3,#0
000050  221a              MOVS     r2,#0x1a
000052  2103              MOVS     r1,#3
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       SPI_W_3BYTE
;;;382    
;;;383    	//===========================================//
;;;384    	//Set LED CONTROL PAGE (Page 0)   		       //
;;;385    	//===========================================//	
;;;386    	for( i = 0; i< LED_CONTROL_PAGE_LENGTH ; i++)
00005a  2500              MOVS     r5,#0
;;;387    	{
;;;388    		b_arySPI_Tx_FIFO[i] = 0;
00005c  4c24              LDR      r4,|L4.240|
00005e  9500              STR      r5,[sp,#0]
                  |L4.96|
000060  9800              LDR      r0,[sp,#0]
000062  5425              STRB     r5,[r4,r0]
000064  9800              LDR      r0,[sp,#0]            ;386
000066  1c40              ADDS     r0,r0,#1              ;386
000068  9000              STR      r0,[sp,#0]            ;386
00006a  2848              CMP      r0,#0x48              ;386
00006c  d3f8              BCC      |L4.96|
;;;389    	}
;;;390    	SPI_W_NBYTE(idx, LED_CONTROL_PAGE, LED_CONTROL_ON_OFF_FIRST_ADDR, LED_CONTROL_PAGE_LENGTH);
00006e  2200              MOVS     r2,#0
000070  2348              MOVS     r3,#0x48
000072  4611              MOV      r1,r2
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       SPI_W_NBYTE
;;;391    
;;;392    	//===========================================//
;;;393    	//Set PWM PAGE (Page 1)    						       //
;;;394    	//===========================================//		
;;;395    	for( i = 0; i< LED_PWM_LENGTH ; i++)
00007a  9500              STR      r5,[sp,#0]
                  |L4.124|
;;;396    	{
;;;397    		b_arySPI_Tx_FIFO[i] = 0;
00007c  9800              LDR      r0,[sp,#0]
00007e  5425              STRB     r5,[r4,r0]
000080  9800              LDR      r0,[sp,#0]            ;395
000082  1c40              ADDS     r0,r0,#1              ;395
000084  9000              STR      r0,[sp,#0]            ;395
000086  28c0              CMP      r0,#0xc0              ;395
000088  d3f8              BCC      |L4.124|
;;;398    	}
;;;399    	SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
00008a  23c0              MOVS     r3,#0xc0
00008c  2200              MOVS     r2,#0
00008e  2101              MOVS     r1,#1
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       SPI_W_NBYTE
;;;400    	
;;;401    	//===========================================//
;;;402    	//Set CURRENT PAGE (Page 4)      				     //
;;;403    	//===========================================//	
;;;404    	b_arySPI_Tx_FIFO[0] = CONST_CURRENT_STEP_CB1;
000096  2180              MOVS     r1,#0x80
000098  7021              STRB     r1,[r4,#0]
;;;405    	b_arySPI_Tx_FIFO[1] = CONST_CURRENT_STEP_CB2;
00009a  7061              STRB     r1,[r4,#1]
;;;406    	b_arySPI_Tx_FIFO[2] = CONST_CURRENT_STEP_CB3;
00009c  70a1              STRB     r1,[r4,#2]
;;;407    	b_arySPI_Tx_FIFO[3] = CONST_CURRENT_STEP_CB4;
00009e  70e1              STRB     r1,[r4,#3]
;;;408    	b_arySPI_Tx_FIFO[4] = CONST_CURRENT_STEP_CB5;
0000a0  7121              STRB     r1,[r4,#4]
;;;409    	b_arySPI_Tx_FIFO[5] = CONST_CURRENT_STEP_CB6;
0000a2  7161              STRB     r1,[r4,#5]
;;;410    	b_arySPI_Tx_FIFO[6] = CONST_CURRENT_STEP_CB7;
0000a4  71a1              STRB     r1,[r4,#6]
;;;411    	b_arySPI_Tx_FIFO[7] = CONST_CURRENT_STEP_CB8;
0000a6  71e1              STRB     r1,[r4,#7]
;;;412    	b_arySPI_Tx_FIFO[8] = CONST_CURRENT_STEP_CB9;
0000a8  7221              STRB     r1,[r4,#8]
;;;413    	b_arySPI_Tx_FIFO[9] = CONST_CURRENT_STEP_CB10;
0000aa  7261              STRB     r1,[r4,#9]
;;;414    	b_arySPI_Tx_FIFO[10] = CONST_CURRENT_STEP_CB11;
0000ac  72a1              STRB     r1,[r4,#0xa]
;;;415    	b_arySPI_Tx_FIFO[11] = CONST_CURRENT_STEP_CB12;
0000ae  72e1              STRB     r1,[r4,#0xb]
;;;416    	SPI_W_NBYTE(idx, CURRENT_TUNE_PAGE, LED_CURRENT_TUNE_FIRST_ADDR, LED_CURRENT_TUNE_LENGTH);
0000b0  230c              MOVS     r3,#0xc
0000b2  2200              MOVS     r2,#0
0000b4  2104              MOVS     r1,#4
0000b6  4630              MOV      r0,r6
0000b8  f7fffffe          BL       SPI_W_NBYTE
;;;417    	
;;;418    	//===========================================//
;;;419    	//Enable LEDs ON/OFF 						  		       //
;;;420    	//===========================================//	
;;;421    	for( i = 0; i< LED_CONTROL_ON_OFF_LENGTH ; i++)
;;;422    	{
;;;423    		b_arySPI_Tx_FIFO[i] = 0xFF;
0000bc  20ff              MOVS     r0,#0xff
0000be  9500              STR      r5,[sp,#0]
                  |L4.192|
0000c0  9900              LDR      r1,[sp,#0]
0000c2  5460              STRB     r0,[r4,r1]
0000c4  9900              LDR      r1,[sp,#0]            ;421
0000c6  1c49              ADDS     r1,r1,#1              ;421
0000c8  9100              STR      r1,[sp,#0]            ;421
0000ca  2918              CMP      r1,#0x18              ;421
0000cc  d3f8              BCC      |L4.192|
;;;424    	}
;;;425    	SPI_W_NBYTE(idx, LED_CONTROL_PAGE, LED_CONTROL_ON_OFF_FIRST_ADDR, LED_CONTROL_PAGE_LENGTH);
0000ce  2200              MOVS     r2,#0
0000d0  2348              MOVS     r3,#0x48
0000d2  4611              MOV      r1,r2
0000d4  4630              MOV      r0,r6
0000d6  f7fffffe          BL       SPI_W_NBYTE
;;;426    
;;;427    	//** Setting LED driver to normal mode 
;;;428    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_NORMAL_MODE);
0000da  b001              ADD      sp,sp,#4
0000dc  4630              MOV      r0,r6
0000de  e8bd40f0          POP      {r4-r7,lr}
0000e2  2301              MOVS     r3,#1
0000e4  2200              MOVS     r2,#0
0000e6  2103              MOVS     r1,#3
0000e8  f7ffbffe          B.W      SPI_W_3BYTE
;;;429    }
;;;430    	
                          ENDP

                  |L4.236|
                          DCD      0x400048b8
                  |L4.240|
                          DCD      ||.bss||

                          AREA ||i.LED_SW_SLEEP||, CODE, READONLY, ALIGN=1

                  LED_SW_SLEEP PROC
;;;462    *****************************************************************************/
;;;463    void LED_SW_SLEEP(uint8_t idx)
000000  b510              PUSH     {r4,lr}
;;;464    {
;;;465    	// System must go to SW shutdowm mode
;;;466    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_SHUT_DOWN_MODE);
000002  2300              MOVS     r3,#0
000004  4604              MOV      r4,r0                 ;464
000006  461a              MOV      r2,r3
000008  2103              MOVS     r1,#3
00000a  f7fffffe          BL       SPI_W_3BYTE
;;;467    	//** Write SW Sleep Register
;;;468    	SPI_W_3BYTE(idx, FUNCTION_PAGE,SOFTWARE_SLEEP_REG, mskSLEEP_ENABLE);
00000e  2302              MOVS     r3,#2
000010  221a              MOVS     r2,#0x1a
000012  2103              MOVS     r1,#3
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       SPI_W_3BYTE
;;;469        CLK_SysTickDelay(5000);
00001a  e8bd4010          POP      {r4,lr}
00001e  f2413088          MOV      r0,#0x1388
000022  f7ffbffe          B.W      CLK_SysTickDelay
;;;470    	
;;;471    }
;;;472    
                          ENDP


                          AREA ||i.LED_SnledSetColor||, CODE, READONLY, ALIGN=2

                  LED_SnledSetColor PROC
;;;1016   
;;;1017   void LED_SnledSetColor(uint8_t idx , uint8_t bPWM_R_Value , uint8_t bPWM_G_Value , uint8_t bPWM_B_Value)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1018   {
000004  461d              MOV      r5,r3
000006  4616              MOV      r6,r2
000008  4688              MOV      r8,r1
;;;1019   	uint32_t i, j;
;;;1020   //	uint8_t	bIndexPrevious, bIndexCurrent;
;;;1021   //	uint8_t	bRed, bGreen, bBlue;
;;;1022   	
;;;1023   	#if 1
;;;1024   	// System must go to SW shutdowm mode
;;;1025   	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_SHUT_DOWN_MODE);
00000a  2300              MOVS     r3,#0
00000c  4681              MOV      r9,r0                 ;1018
00000e  461a              MOV      r2,r3
000010  2103              MOVS     r1,#3
000012  f7fffffe          BL       SPI_W_3BYTE
;;;1026   	
;;;1027   	//=====================================//
;;;1028   	//Set LED CTL Registers (Frame1Page) //
;;;1029   	//=====================================//
;;;1030   	for( i = 0; i< LED_CONTROL_ON_OFF_LENGTH ; i++)
;;;1031   	{
;;;1032   		b_arySPI_Tx_FIFO[i] = b_tabLED_Control_Map[i];	// setting 1~64 RGB LED CTL on
000016  4a15              LDR      r2,|L6.108|
000018  4915              LDR      r1,|L6.112|
00001a  2000              MOVS     r0,#0                 ;1030
                  |L6.28|
00001c  5c13              LDRB     r3,[r2,r0]
00001e  540b              STRB     r3,[r1,r0]
000020  1c40              ADDS     r0,r0,#1
000022  2818              CMP      r0,#0x18              ;1030
000024  d3fa              BCC      |L6.28|
;;;1033   	}
;;;1034   	SPI_W_NBYTE(idx, LED_CONTROL_PAGE, LED_CONTROL_ON_OFF_FIRST_ADDR, LED_CONTROL_PAGE_LENGTH);
000026  2200              MOVS     r2,#0
000028  2348              MOVS     r3,#0x48
00002a  4611              MOV      r1,r2
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       SPI_W_NBYTE
;;;1035   	
;;;1036   	//** Setting LED driver to normal mode 
;;;1037   	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_NORMAL_MODE);
000032  2301              MOVS     r3,#1
000034  2200              MOVS     r2,#0
000036  2103              MOVS     r1,#3
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       SPI_W_3BYTE
;;;1038   	#endif
;;;1039   	
;;;1040   	//===============================//
;;;1041   	//Start LED White light on Flow  //
;;;1042   	//===============================//
;;;1043   
;;;1044   	//Set RGB LED PWM value
;;;1045   //	bRed 	 = bPWM_R_Value;	//**  LED_R
;;;1046   //	bGreen  = bPWM_G_Value;	//**  LED_G	
;;;1047   //	bBlue	 = bPWM_B_Value;	//**  LED_B
;;;1048   	for (j=0;j<LED_LAYOUT_TOTAL_LED_NUMBERS;j++)
;;;1049   		LED_PWMUpdate(b_tabLED_Location[j],	bPWM_R_Value ,bPWM_G_Value ,bPWM_B_Value);
00003e  4f0d              LDR      r7,|L6.116|
000040  2400              MOVS     r4,#0                 ;1048
                  |L6.66|
000042  462b              MOV      r3,r5
000044  5d38              LDRB     r0,[r7,r4]
000046  4632              MOV      r2,r6
000048  4641              MOV      r1,r8
00004a  f7fffffe          BL       LED_PWMUpdate
00004e  1c64              ADDS     r4,r4,#1
000050  2c40              CMP      r4,#0x40              ;1048
000052  d3f6              BCC      |L6.66|
;;;1050   
;;;1051   	//** Update LED Driver
;;;1052   	SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
000054  23c0              MOVS     r3,#0xc0
000056  2200              MOVS     r2,#0
000058  2101              MOVS     r1,#1
00005a  4648              MOV      r0,r9
00005c  f7fffffe          BL       SPI_W_NBYTE
;;;1053   	CLK_SysTickDelay(60);
000060  e8bd47f0          POP      {r4-r10,lr}
000064  203c              MOVS     r0,#0x3c
000066  f7ffbffe          B.W      CLK_SysTickDelay
;;;1054   
;;;1055   
;;;1056   }
;;;1057   
                          ENDP

00006a  0000              DCW      0x0000
                  |L6.108|
                          DCD      ||.constdata||+0x100
                  |L6.112|
                          DCD      ||.bss||
                  |L6.116|
                          DCD      ||.constdata||

                          AREA ||i.LED_SnledSetSingleColor||, CODE, READONLY, ALIGN=2

                  LED_SnledSetSingleColor PROC
;;;1061   
;;;1062   void LED_SnledSetSingleColor(uint8_t idx ,uint8_t bPWM_Index, uint8_t bPWM_R_Value , uint8_t bPWM_G_Value , uint8_t bPWM_B_Value)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1063   {
000004  461c              MOV      r4,r3
000006  4615              MOV      r5,r2
000008  460e              MOV      r6,r1
;;;1064   	uint32_t i;
;;;1065   //	uint8_t	bIndexPrevious, bIndexCurrent;
;;;1066   //	uint8_t	bRed, bGreen, bBlue;
;;;1067   	
;;;1068   	#if 1
;;;1069   	// System must go to SW shutdowm mode
;;;1070   	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_SHUT_DOWN_MODE);
00000a  2300              MOVS     r3,#0
00000c  4680              MOV      r8,r0                 ;1063
00000e  461a              MOV      r2,r3
000010  2103              MOVS     r1,#3
000012  9f06              LDR      r7,[sp,#0x18]
000014  f7fffffe          BL       SPI_W_3BYTE
;;;1071   	
;;;1072   	//=====================================//
;;;1073   	//Set LED CTL Registers (Frame1Page) //
;;;1074   	//=====================================//
;;;1075   	for( i = 0; i< LED_CONTROL_ON_OFF_LENGTH ; i++)
;;;1076   	{
;;;1077   		b_arySPI_Tx_FIFO[i] = b_tabLED_Control_Map[i];	// setting 1~64 RGB LED CTL on
000018  4a12              LDR      r2,|L7.100|
00001a  4913              LDR      r1,|L7.104|
00001c  2000              MOVS     r0,#0                 ;1075
                  |L7.30|
00001e  5c13              LDRB     r3,[r2,r0]
000020  540b              STRB     r3,[r1,r0]
000022  1c40              ADDS     r0,r0,#1
000024  2818              CMP      r0,#0x18              ;1075
000026  d3fa              BCC      |L7.30|
;;;1078   	}
;;;1079   	SPI_W_NBYTE(idx, LED_CONTROL_PAGE, LED_CONTROL_ON_OFF_FIRST_ADDR, LED_CONTROL_PAGE_LENGTH);
000028  2200              MOVS     r2,#0
00002a  2348              MOVS     r3,#0x48
00002c  4611              MOV      r1,r2
00002e  4640              MOV      r0,r8
000030  f7fffffe          BL       SPI_W_NBYTE
;;;1080   	
;;;1081   	//** Setting LED driver to normal mode 
;;;1082   	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_NORMAL_MODE);
000034  2301              MOVS     r3,#1
000036  2200              MOVS     r2,#0
000038  2103              MOVS     r1,#3
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       SPI_W_3BYTE
;;;1083   	#endif
;;;1084   	
;;;1085   	//===============================//
;;;1086   	//Start LED White light on Flow  //
;;;1087   	//===============================//
;;;1088   
;;;1089   	//Set RGB LED PWM value
;;;1090   //	bRed 	 = bPWM_R_Value;	//**  LED_R
;;;1091   //	bGreen  = bPWM_G_Value;	//**  LED_G	
;;;1092   //	bBlue	 = bPWM_B_Value;	//**  LED_B
;;;1093   //	for (j=0;j<LED_LAYOUT_TOTAL_LED_NUMBERS;j++)
;;;1094   //		LED_PWMUpdate(b_tabLED_Location[j],	bRed ,bGreen ,bBlue);
;;;1095   	LED_PWMUpdate(bPWM_Index,bPWM_R_Value ,bPWM_G_Value ,bPWM_B_Value);
000040  463b              MOV      r3,r7
000042  4622              MOV      r2,r4
000044  4629              MOV      r1,r5
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       LED_PWMUpdate
;;;1096   
;;;1097   	//** Update LED Driver
;;;1098   	SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
00004c  23c0              MOVS     r3,#0xc0
00004e  2200              MOVS     r2,#0
000050  2101              MOVS     r1,#1
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       SPI_W_NBYTE
;;;1099   	CLK_SysTickDelay(60);
000058  e8bd41f0          POP      {r4-r8,lr}
00005c  203c              MOVS     r0,#0x3c
00005e  f7ffbffe          B.W      CLK_SysTickDelay
;;;1100   
;;;1101   
;;;1102   }
;;;1103   
                          ENDP

000062  0000              DCW      0x0000
                  |L7.100|
                          DCD      ||.constdata||+0x100
                  |L7.104|
                          DCD      ||.bss||

                          AREA ||i.LED_SnledType4Fun1||, CODE, READONLY, ALIGN=2

                  LED_SnledType4Fun1 PROC
;;;587    
;;;588    void LED_SnledType4Fun1(uint8_t idx)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;589    {
;;;590    	uint32_t i, j, count;
;;;591    	uint8_t	bIndexPrevious, bIndexCurrent;
;;;592    	
;;;593    	#if 1
;;;594    	// System must go to SW shutdowm mode
;;;595    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_SHUT_DOWN_MODE);
000004  2300              MOVS     r3,#0
000006  4682              MOV      r10,r0                ;589
000008  461a              MOV      r2,r3
00000a  2103              MOVS     r1,#3
00000c  f7fffffe          BL       SPI_W_3BYTE
;;;596    	
;;;597    	//=====================================//
;;;598    	//Set LED CTL Registers (Frame1Page) //
;;;599    	//=====================================//
;;;600    	for( i = 0; i< LED_CONTROL_ON_OFF_LENGTH ; i++)
000010  2000              MOVS     r0,#0
;;;601    	{
;;;602    		b_arySPI_Tx_FIFO[i] = 0xFF;	// setting 1~64 RGB LED CTL on
000012  4e78              LDR      r6,|L8.500|
000014  24ff              MOVS     r4,#0xff
                  |L8.22|
000016  5434              STRB     r4,[r6,r0]
000018  1c40              ADDS     r0,r0,#1
00001a  2818              CMP      r0,#0x18              ;600
00001c  d3fb              BCC      |L8.22|
;;;603    	}
;;;604    	SPI_W_NBYTE(idx, LED_CONTROL_PAGE, LED_CONTROL_ON_OFF_FIRST_ADDR, LED_CONTROL_PAGE_LENGTH);
00001e  2200              MOVS     r2,#0
000020  2348              MOVS     r3,#0x48
000022  4611              MOV      r1,r2
000024  4650              MOV      r0,r10
000026  f7fffffe          BL       SPI_W_NBYTE
;;;605    	
;;;606    	//** Setting LED driver to normal mode 
;;;607    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_NORMAL_MODE);
00002a  2301              MOVS     r3,#1
00002c  2200              MOVS     r2,#0
00002e  2103              MOVS     r1,#3
000030  4650              MOV      r0,r10
000032  f7fffffe          BL       SPI_W_3BYTE
;;;608    	#endif
;;;609    	
;;;610    
;;;611    	//===============================//
;;;612    	//Start R_LED Single light on Flow//
;;;613    	//===============================//
;;;614    	for( i = 0; i< LED_PWM_LENGTH ; i++)
000036  2700              MOVS     r7,#0
;;;615    	{
;;;616    		for (j=0;j<LED_PWM_LENGTH;j++)
;;;617    			b_arySPI_Tx_FIFO[j] = 0;
;;;618    		if (i == 0)
;;;619    		{
;;;620    			b_arySPI_Tx_FIFO[0x9F] = 0;
;;;621    			b_arySPI_Tx_FIFO[0xAF] = 0;
;;;622    			b_arySPI_Tx_FIFO[0xBF] = 0;
;;;623    			bIndexPrevious = bIndexCurrent = 0;
;;;624    		}
;;;625    		else
;;;626    		{
;;;627    			bIndexCurrent = i;
;;;628    			bIndexPrevious = i-1;
;;;629    		}
;;;630    		
;;;631    		if (((bIndexCurrent & 0xF0) == 0x00) || ((bIndexCurrent & 0xF0) == 0x30) || ((bIndexCurrent & 0xF0) == 0x60) || ((bIndexCurrent & 0xF0) == 0x90))
;;;632    		{
;;;633    			//Turn Off Previous RGB LED PWM value
;;;634    			if ((bIndexCurrent == 0x30) || (bIndexCurrent == 0x60) || (bIndexCurrent == 0x90))
;;;635    				b_arySPI_Tx_FIFO[bIndexPrevious-0x20] = 0;
;;;636    			else
;;;637    				b_arySPI_Tx_FIFO[bIndexPrevious] = 0x00;
;;;638    			
;;;639    			//Set RGB LED PWM value
;;;640    			b_arySPI_Tx_FIFO[bIndexCurrent] = 0xFF;
;;;641    
;;;642    			//** Update LED Driver
;;;643    			SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
;;;644    			CLK_SysTickDelay(100000);
000038  f8df91bc          LDR      r9,|L8.504|
00003c  463d              MOV      r5,r7                 ;614
                  |L8.62|
00003e  2000              MOVS     r0,#0                 ;616
                  |L8.64|
000040  5435              STRB     r5,[r6,r0]            ;617
000042  1c40              ADDS     r0,r0,#1              ;617
000044  28c0              CMP      r0,#0xc0              ;616
000046  d3fb              BCC      |L8.64|
000048  b347              CBZ      r7,|L8.156|
00004a  1e79              SUBS     r1,r7,#1              ;628
00004c  b2f8              UXTB     r0,r7                 ;627
00004e  b2c9              UXTB     r1,r1                 ;628
                  |L8.80|
000050  0902              LSRS     r2,r0,#4              ;631
000052  d00b              BEQ      |L8.108|
000054  2203              MOVS     r2,#3                 ;631
000056  ebb21f10          CMP      r2,r0,LSR #4          ;631
00005a  d007              BEQ      |L8.108|
00005c  2206              MOVS     r2,#6                 ;631
00005e  ebb21f10          CMP      r2,r0,LSR #4          ;631
000062  d003              BEQ      |L8.108|
000064  2209              MOVS     r2,#9                 ;631
000066  ebb21f10          CMP      r2,r0,LSR #4          ;631
00006a  d110              BNE      |L8.142|
                  |L8.108|
00006c  2830              CMP      r0,#0x30              ;634
00006e  d01e              BEQ      |L8.174|
000070  2860              CMP      r0,#0x60              ;634
000072  d01c              BEQ      |L8.174|
000074  2890              CMP      r0,#0x90              ;634
000076  d01a              BEQ      |L8.174|
000078  5475              STRB     r5,[r6,r1]            ;637
                  |L8.122|
00007a  5434              STRB     r4,[r6,r0]            ;640
00007c  23c0              MOVS     r3,#0xc0              ;643
00007e  2200              MOVS     r2,#0                 ;643
000080  2101              MOVS     r1,#1                 ;643
000082  4650              MOV      r0,r10                ;643
000084  f7fffffe          BL       SPI_W_NBYTE
000088  4648              MOV      r0,r9
00008a  f7fffffe          BL       CLK_SysTickDelay
                  |L8.142|
00008e  1c7f              ADDS     r7,r7,#1
000090  2fc0              CMP      r7,#0xc0              ;614
000092  d3d4              BCC      |L8.62|
;;;645    		}
;;;646    	}
;;;647    
;;;648    	//===============================//
;;;649    	//Start G_LED Single light on Flow//
;;;650    	//===============================//
;;;651    	for( i = 0; i< LED_PWM_LENGTH ; i++)
000094  2700              MOVS     r7,#0
000096  f04f0801          MOV      r8,#1                 ;607
00009a  e037              B        |L8.268|
                  |L8.156|
00009c  4631              MOV      r1,r6                 ;620
00009e  2000              MOVS     r0,#0                 ;623
0000a0  f8015f9f          STRB     r5,[r1,#0x9f]!        ;620
0000a4  740d              STRB     r5,[r1,#0x10]         ;621
0000a6  f88650bf          STRB     r5,[r6,#0xbf]         ;622
0000aa  4601              MOV      r1,r0                 ;623
0000ac  e7d0              B        |L8.80|
                  |L8.174|
0000ae  4431              ADD      r1,r1,r6              ;635
0000b0  f8015c20          STRB     r5,[r1,#-0x20]        ;635
0000b4  e7e1              B        |L8.122|
                  |L8.182|
;;;652    	{
;;;653    		if (i == 0)
0000b6  b34f              CBZ      r7,|L8.268|
;;;654    		{
;;;655    			b_arySPI_Tx_FIFO[0x9F] = 0;
;;;656    			b_arySPI_Tx_FIFO[0xAF] = 0;
;;;657    			b_arySPI_Tx_FIFO[0xBF] = 0;
;;;658    			bIndexPrevious = bIndexCurrent = 0;
;;;659    		}
;;;660    		else
;;;661    		{
;;;662    			bIndexCurrent = i;
;;;663    			bIndexPrevious = i-1;
0000b8  1e79              SUBS     r1,r7,#1
0000ba  b2f8              UXTB     r0,r7                 ;662
0000bc  b2c9              UXTB     r1,r1
                  |L8.190|
;;;664    		}
;;;665    		
;;;666    		if (((bIndexCurrent & 0xF0) == 0x10) || ((bIndexCurrent & 0xF0) == 0x40) || ((bIndexCurrent & 0xF0) == 0x70) || ((bIndexCurrent & 0xF0) == 0xA0))
0000be  ebb81f10          CMP      r8,r0,LSR #4
0000c2  d00b              BEQ      |L8.220|
0000c4  2204              MOVS     r2,#4
0000c6  ebb21f10          CMP      r2,r0,LSR #4
0000ca  d007              BEQ      |L8.220|
0000cc  2207              MOVS     r2,#7
0000ce  ebb21f10          CMP      r2,r0,LSR #4
0000d2  d003              BEQ      |L8.220|
0000d4  220a              MOVS     r2,#0xa
0000d6  ebb21f10          CMP      r2,r0,LSR #4
0000da  d110              BNE      |L8.254|
                  |L8.220|
;;;667    		{
;;;668    			//Turn Off Previous RGB LED PWM value
;;;669    			if ((bIndexCurrent == 0x40) || (bIndexCurrent == 0x70) || (bIndexCurrent == 0xA0))
0000dc  2840              CMP      r0,#0x40
0000de  d01e              BEQ      |L8.286|
0000e0  2870              CMP      r0,#0x70
0000e2  d01c              BEQ      |L8.286|
0000e4  28a0              CMP      r0,#0xa0
0000e6  d01a              BEQ      |L8.286|
;;;670    				b_arySPI_Tx_FIFO[bIndexPrevious-0x20] = 0;
;;;671    			else
;;;672    				b_arySPI_Tx_FIFO[bIndexPrevious] = 0x00;
0000e8  5475              STRB     r5,[r6,r1]
                  |L8.234|
;;;673    			
;;;674    			//Set RGB LED PWM value
;;;675    			b_arySPI_Tx_FIFO[bIndexCurrent] = 0xFF;
0000ea  5434              STRB     r4,[r6,r0]
;;;676    
;;;677    			//** Update LED Driver
;;;678    			SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
0000ec  23c0              MOVS     r3,#0xc0
0000ee  2200              MOVS     r2,#0
0000f0  2101              MOVS     r1,#1
0000f2  4650              MOV      r0,r10
0000f4  f7fffffe          BL       SPI_W_NBYTE
;;;679    			CLK_SysTickDelay(100000);
0000f8  4648              MOV      r0,r9
0000fa  f7fffffe          BL       CLK_SysTickDelay
                  |L8.254|
0000fe  1c7f              ADDS     r7,r7,#1
000100  2fc0              CMP      r7,#0xc0              ;651
000102  d3d8              BCC      |L8.182|
;;;680    		}
;;;681    	}
;;;682    
;;;683    		//===============================//
;;;684    	//Start B_LED Single light on Flow//
;;;685    	//===============================//
;;;686    	for( i = 0; i< LED_PWM_LENGTH ; i++)
000104  2700              MOVS     r7,#0
;;;687    	{
;;;688    		if (i == 0)
;;;689    		{
;;;690    			b_arySPI_Tx_FIFO[0x9F] = 0;
;;;691    			b_arySPI_Tx_FIFO[0xAF] = 0;
;;;692    			b_arySPI_Tx_FIFO[0xBF] = 0;
;;;693    			bIndexPrevious = bIndexCurrent = 0;
;;;694    		}
;;;695    		else
;;;696    		{
;;;697    			bIndexCurrent = i;
;;;698    			bIndexPrevious = i-1;
;;;699    		}
;;;700    		
;;;701    		if (((bIndexCurrent & 0xF0) == 0x20) || ((bIndexCurrent & 0xF0) == 0x50) || ((bIndexCurrent & 0xF0) == 0x80) || ((bIndexCurrent & 0xF0) == 0xB0))
000106  f04f0802          MOV      r8,#2
00010a  e065              B        |L8.472|
                  |L8.268|
00010c  f886509f          STRB     r5,[r6,#0x9f]         ;655
000110  f88650af          STRB     r5,[r6,#0xaf]         ;656
000114  2000              MOVS     r0,#0                 ;658
000116  f88650bf          STRB     r5,[r6,#0xbf]         ;657
00011a  4601              MOV      r1,r0                 ;658
00011c  e7cf              B        |L8.190|
                  |L8.286|
00011e  4431              ADD      r1,r1,r6              ;670
000120  f8015c20          STRB     r5,[r1,#-0x20]        ;670
000124  e7e1              B        |L8.234|
                  |L8.294|
000126  b3ef              CBZ      r7,|L8.420|
000128  1e79              SUBS     r1,r7,#1              ;698
00012a  b2f8              UXTB     r0,r7                 ;697
00012c  b2c9              UXTB     r1,r1                 ;698
                  |L8.302|
00012e  ebb81f10          CMP      r8,r0,LSR #4
000132  d00b              BEQ      |L8.332|
000134  2205              MOVS     r2,#5
000136  ebb21f10          CMP      r2,r0,LSR #4
00013a  d007              BEQ      |L8.332|
00013c  2208              MOVS     r2,#8
00013e  ebb21f10          CMP      r2,r0,LSR #4
000142  d003              BEQ      |L8.332|
000144  220b              MOVS     r2,#0xb
000146  ebb21f10          CMP      r2,r0,LSR #4
00014a  d110              BNE      |L8.366|
                  |L8.332|
;;;702    		{
;;;703    			//Turn Off Previous RGB LED PWM value
;;;704    			if ((bIndexCurrent == 0x50) || (bIndexCurrent == 0x80) || (bIndexCurrent == 0xB0))
00014c  2850              CMP      r0,#0x50
00014e  d04c              BEQ      |L8.490|
000150  2880              CMP      r0,#0x80
000152  d04a              BEQ      |L8.490|
000154  28b0              CMP      r0,#0xb0
000156  d048              BEQ      |L8.490|
;;;705    				b_arySPI_Tx_FIFO[bIndexPrevious-0x20] = 0;
;;;706    			else
;;;707    				b_arySPI_Tx_FIFO[bIndexPrevious] = 0x00;
000158  5475              STRB     r5,[r6,r1]
                  |L8.346|
;;;708    			
;;;709    			//Set RGB LED PWM value
;;;710    			b_arySPI_Tx_FIFO[bIndexCurrent] = 0xFF;
00015a  5434              STRB     r4,[r6,r0]
;;;711    
;;;712    			//** Update LED Driver
;;;713    			SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
00015c  23c0              MOVS     r3,#0xc0
00015e  2200              MOVS     r2,#0
000160  2101              MOVS     r1,#1
000162  4650              MOV      r0,r10
000164  f7fffffe          BL       SPI_W_NBYTE
;;;714    			CLK_SysTickDelay(100000);
000168  4648              MOV      r0,r9
00016a  f7fffffe          BL       CLK_SysTickDelay
                  |L8.366|
00016e  1c7f              ADDS     r7,r7,#1
000170  2fc0              CMP      r7,#0xc0              ;686
000172  d3d8              BCC      |L8.294|
;;;715    		}
;;;716    	}
;;;717    	
;;;718    	//===============================//
;;;719    	//Start LED White light on Flow  //
;;;720    	//===============================//
;;;721    	
;;;722    	count = 0;
000174  2500              MOVS     r5,#0
;;;723    	while(count<3)
;;;724    	{
;;;725    		for (i=0;i<=255;i++)
;;;726    		{
;;;727    			//Set RGB LED PWM value
;;;728    			for (j=0;j<LED_PWM_LENGTH;j++)
;;;729    				b_arySPI_Tx_FIFO[j] = i;
;;;730    			
;;;731    			//** Update LED Driver
;;;732    			SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
;;;733    			CLK_SysTickDelay(1000);
000176  f44f777a          MOV      r7,#0x3e8
                  |L8.378|
00017a  2400              MOVS     r4,#0                 ;725
                  |L8.380|
00017c  2000              MOVS     r0,#0                 ;728
00017e  b2e1              UXTB     r1,r4                 ;627
                  |L8.384|
000180  5431              STRB     r1,[r6,r0]            ;729
000182  1c40              ADDS     r0,r0,#1              ;729
000184  28c0              CMP      r0,#0xc0              ;728
000186  d3fb              BCC      |L8.384|
000188  23c0              MOVS     r3,#0xc0              ;732
00018a  2200              MOVS     r2,#0                 ;732
00018c  2101              MOVS     r1,#1                 ;732
00018e  4650              MOV      r0,r10                ;732
000190  f7fffffe          BL       SPI_W_NBYTE
000194  4638              MOV      r0,r7
000196  f7fffffe          BL       CLK_SysTickDelay
00019a  1c64              ADDS     r4,r4,#1
00019c  2cff              CMP      r4,#0xff              ;725
00019e  d9ed              BLS      |L8.380|
;;;734    		}
;;;735    		
;;;736    		for (i=0;i<=255;i++)
0001a0  2400              MOVS     r4,#0
                  |L8.418|
;;;737    		{
;;;738    			//Set RGB LED PWM value
;;;739    			for (j=0;j<LED_PWM_LENGTH;j++)
0001a2  e000              B        |L8.422|
                  |L8.420|
0001a4  e018              B        |L8.472|
                  |L8.422|
;;;740    				b_arySPI_Tx_FIFO[j] = 255-i;
0001a6  f1c401ff          RSB      r1,r4,#0xff
0001aa  2000              MOVS     r0,#0                 ;739
0001ac  b2c9              UXTB     r1,r1
                  |L8.430|
0001ae  5431              STRB     r1,[r6,r0]
0001b0  1c40              ADDS     r0,r0,#1
0001b2  28c0              CMP      r0,#0xc0              ;739
0001b4  d3fb              BCC      |L8.430|
;;;741    
;;;742    			//** Update LED Driver
;;;743    			SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
0001b6  23c0              MOVS     r3,#0xc0
0001b8  2200              MOVS     r2,#0
0001ba  2101              MOVS     r1,#1
0001bc  4650              MOV      r0,r10
0001be  f7fffffe          BL       SPI_W_NBYTE
;;;744    			CLK_SysTickDelay(1000);
0001c2  4638              MOV      r0,r7
0001c4  f7fffffe          BL       CLK_SysTickDelay
0001c8  1c64              ADDS     r4,r4,#1
0001ca  2cff              CMP      r4,#0xff              ;736
0001cc  d9e9              BLS      |L8.418|
0001ce  1c6d              ADDS     r5,r5,#1              ;736
0001d0  2d03              CMP      r5,#3                 ;723
0001d2  d3d2              BCC      |L8.378|
;;;745    		}
;;;746    	count++;
;;;747    	}
;;;748    }
0001d4  e8bd87f0          POP      {r4-r10,pc}
                  |L8.472|
0001d8  f886509f          STRB     r5,[r6,#0x9f]         ;690
0001dc  f88650af          STRB     r5,[r6,#0xaf]         ;691
0001e0  2000              MOVS     r0,#0                 ;693
0001e2  f88650bf          STRB     r5,[r6,#0xbf]         ;692
0001e6  4601              MOV      r1,r0                 ;693
0001e8  e7a1              B        |L8.302|
                  |L8.490|
0001ea  4431              ADD      r1,r1,r6              ;705
0001ec  f8015c20          STRB     r5,[r1,#-0x20]        ;705
0001f0  e7b3              B        |L8.346|
;;;749    
                          ENDP

0001f2  0000              DCW      0x0000
                  |L8.500|
                          DCD      ||.bss||
                  |L8.504|
                          DCD      0x000186a0

                          AREA ||i.LED_SnledType4Fun2||, CODE, READONLY, ALIGN=2

                  LED_SnledType4Fun2 PROC
;;;757    *****************************************************************************/
;;;758    void LED_SnledType4Fun2(uint8_t idx)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;759    {
;;;760    	uint32_t i, j, count;
;;;761    	uint8_t	bIndexPrevious, bIndexCurrent;
;;;762    	uint8_t	bRed, bGreen, bBlue;
;;;763    	
;;;764    	#if 1
;;;765    	// System must go to SW shutdowm mode
;;;766    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_SHUT_DOWN_MODE);
000004  2300              MOVS     r3,#0
000006  461a              MOV      r2,r3
000008  2103              MOVS     r1,#3
00000a  9800              LDR      r0,[sp,#0]
00000c  f7fffffe          BL       SPI_W_3BYTE
;;;767    	
;;;768    	//=====================================//
;;;769    	//Set LED CTL Registers (Frame1Page) //
;;;770    	//=====================================//
;;;771    	for( i = 0; i< LED_CONTROL_ON_OFF_LENGTH ; i++)
;;;772    	{
;;;773    		b_arySPI_Tx_FIFO[i] = b_tabLED_Control_Map[i];	// setting 1~64 RGB LED CTL on
000010  496c              LDR      r1,|L9.452|
000012  4d6d              LDR      r5,|L9.456|
000014  2000              MOVS     r0,#0                 ;771
                  |L9.22|
000016  5c0a              LDRB     r2,[r1,r0]
000018  542a              STRB     r2,[r5,r0]
00001a  1c40              ADDS     r0,r0,#1
00001c  2818              CMP      r0,#0x18              ;771
00001e  d3fa              BCC      |L9.22|
;;;774    	}
;;;775    	SPI_W_NBYTE(idx, LED_CONTROL_PAGE, LED_CONTROL_ON_OFF_FIRST_ADDR, LED_CONTROL_PAGE_LENGTH);
000020  2200              MOVS     r2,#0
000022  2348              MOVS     r3,#0x48
000024  4611              MOV      r1,r2
000026  9800              LDR      r0,[sp,#0]
000028  f7fffffe          BL       SPI_W_NBYTE
;;;776    	
;;;777    	//** Setting LED driver to normal mode 
;;;778    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_NORMAL_MODE);
00002c  2301              MOVS     r3,#1
00002e  2200              MOVS     r2,#0
000030  2103              MOVS     r1,#3
000032  9800              LDR      r0,[sp,#0]
000034  f7fffffe          BL       SPI_W_3BYTE
;;;779    	#endif
;;;780    	
;;;781    	//===============================//
;;;782    	//Start R_LED Single light on Flow//
;;;783    	//===============================//
;;;784    	for (i=0;i<LED_LAYOUT_TOTAL_LED_NUMBERS;i++)
000038  2400              MOVS     r4,#0
;;;785    	{
;;;786    		for (j=0;j<LED_PWM_LENGTH;j++)
;;;787    			b_arySPI_Tx_FIFO[j] = 0;
;;;788    		if (i == 0)
;;;789    		{
;;;790    			LED_PWMUpdate(b_tabLED_Location[63],	0 ,0 ,0);
;;;791    			bIndexPrevious = bIndexCurrent = 0;
;;;792    		}
;;;793    		else
;;;794    		{
;;;795    			bIndexCurrent = i;
;;;796    			bIndexPrevious = i-1;
;;;797    		}
;;;798    		
;;;799    		//Turn Off Previous RGB LED PWM value
;;;800    		LED_PWMUpdate(b_tabLED_Location[bIndexPrevious],	0 ,0 ,0);
;;;801    	
;;;802    		//Set RGB LED PWM value
;;;803    		bRed 	 = 0xFF;	//**  LED_R
;;;804    		bGreen  = 0x00;	//**  LED_G	
;;;805    		bBlue	 = 0x00;	//**  LED_B
;;;806    	
;;;807    		LED_PWMUpdate(b_tabLED_Location[bIndexCurrent],	bRed ,bGreen ,bBlue);
;;;808    
;;;809    		//** Update LED Driver
;;;810    		SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
;;;811    		CLK_SysTickDelay(100000);
00003a  f8df9190          LDR      r9,|L9.460|
00003e  4f64              LDR      r7,|L9.464|
000040  46a0              MOV      r8,r4                 ;784
                  |L9.66|
000042  2000              MOVS     r0,#0                 ;786
000044  4641              MOV      r1,r8                 ;786
                  |L9.70|
000046  5429              STRB     r1,[r5,r0]            ;787
000048  1c40              ADDS     r0,r0,#1              ;787
00004a  28c0              CMP      r0,#0xc0              ;786
00004c  d3fb              BCC      |L9.70|
00004e  b1ec              CBZ      r4,|L9.140|
000050  1e60              SUBS     r0,r4,#1              ;796
000052  b2e6              UXTB     r6,r4                 ;795
000054  b2c0              UXTB     r0,r0                 ;796
                  |L9.86|
000056  2300              MOVS     r3,#0                 ;800
000058  5c38              LDRB     r0,[r7,r0]            ;800
00005a  461a              MOV      r2,r3                 ;800
00005c  4619              MOV      r1,r3                 ;800
00005e  f7fffffe          BL       LED_PWMUpdate
000062  2200              MOVS     r2,#0                 ;804
000064  21ff              MOVS     r1,#0xff              ;803
000066  4613              MOV      r3,r2                 ;805
000068  5db8              LDRB     r0,[r7,r6]            ;807
00006a  f7fffffe          BL       LED_PWMUpdate
00006e  23c0              MOVS     r3,#0xc0              ;810
000070  2200              MOVS     r2,#0                 ;810
000072  2101              MOVS     r1,#1                 ;810
000074  9800              LDR      r0,[sp,#0]            ;810
000076  f7fffffe          BL       SPI_W_NBYTE
00007a  464e              MOV      r6,r9
00007c  4648              MOV      r0,r9
00007e  f7fffffe          BL       CLK_SysTickDelay
000082  1c64              ADDS     r4,r4,#1
000084  2c40              CMP      r4,#0x40              ;784
000086  d3dc              BCC      |L9.66|
;;;812    	}
;;;813    
;;;814    	//===============================//
;;;815    	//Start G_LED Single light on Flow//
;;;816    	//===============================//
;;;817    	for (i=0;i<LED_LAYOUT_TOTAL_LED_NUMBERS;i++)
000088  2400              MOVS     r4,#0
00008a  e026              B        |L9.218|
                  |L9.140|
00008c  2300              MOVS     r3,#0                 ;790
00008e  461a              MOV      r2,r3                 ;790
000090  4619              MOV      r1,r3                 ;790
000092  203f              MOVS     r0,#0x3f              ;790
000094  f7fffffe          BL       LED_PWMUpdate
000098  2000              MOVS     r0,#0                 ;791
00009a  4606              MOV      r6,r0                 ;791
00009c  e7db              B        |L9.86|
                  |L9.158|
;;;818    	{
;;;819    		if (i == 0)
00009e  b1e4              CBZ      r4,|L9.218|
;;;820    		{
;;;821    			LED_PWMUpdate(b_tabLED_Location[63],	0 ,0 ,0);
;;;822    			bIndexPrevious = bIndexCurrent = 0;
;;;823    		}
;;;824    		else
;;;825    		{
;;;826    			bIndexCurrent = i;
;;;827    			bIndexPrevious = i-1;
0000a0  1e60              SUBS     r0,r4,#1
0000a2  b2e5              UXTB     r5,r4                 ;826
0000a4  b2c0              UXTB     r0,r0
                  |L9.166|
;;;828    		}
;;;829    		
;;;830    		//Turn Off Previous RGB LED PWM value
;;;831    		LED_PWMUpdate(b_tabLED_Location[bIndexPrevious],	0 ,0 ,0);
0000a6  2300              MOVS     r3,#0
0000a8  5c38              LDRB     r0,[r7,r0]
0000aa  461a              MOV      r2,r3
0000ac  4619              MOV      r1,r3
0000ae  f7fffffe          BL       LED_PWMUpdate
;;;832    	
;;;833    		//Set RGB LED PWM value
;;;834    		bRed 	 = 0x00;	//**  LED_R
0000b2  2100              MOVS     r1,#0
;;;835    		bGreen  = 0xFF;	//**  LED_G	
0000b4  22ff              MOVS     r2,#0xff
;;;836    		bBlue	 = 0x00;	//**  LED_B
0000b6  460b              MOV      r3,r1
;;;837    	
;;;838    		LED_PWMUpdate(b_tabLED_Location[bIndexCurrent],	bRed ,bGreen ,bBlue);
0000b8  5d78              LDRB     r0,[r7,r5]
0000ba  f7fffffe          BL       LED_PWMUpdate
;;;839    
;;;840    		//** Update LED Driver
;;;841    		SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
0000be  23c0              MOVS     r3,#0xc0
0000c0  2200              MOVS     r2,#0
0000c2  2101              MOVS     r1,#1
0000c4  9800              LDR      r0,[sp,#0]
0000c6  f7fffffe          BL       SPI_W_NBYTE
;;;842    		CLK_SysTickDelay(100000);
0000ca  4630              MOV      r0,r6
0000cc  f7fffffe          BL       CLK_SysTickDelay
0000d0  1c64              ADDS     r4,r4,#1
0000d2  2c40              CMP      r4,#0x40              ;817
0000d4  d3e3              BCC      |L9.158|
;;;843    	}
;;;844    	
;;;845    	//===============================//
;;;846    	//Start B_LED Single light on Flow//
;;;847    	//===============================//
;;;848    	for (i=0;i<LED_LAYOUT_TOTAL_LED_NUMBERS;i++)
0000d6  2400              MOVS     r4,#0
0000d8  e06b              B        |L9.434|
                  |L9.218|
0000da  2300              MOVS     r3,#0                 ;821
0000dc  461a              MOV      r2,r3                 ;821
0000de  4619              MOV      r1,r3                 ;821
0000e0  203f              MOVS     r0,#0x3f              ;821
0000e2  f7fffffe          BL       LED_PWMUpdate
0000e6  2000              MOVS     r0,#0                 ;822
0000e8  4605              MOV      r5,r0                 ;822
0000ea  e7dc              B        |L9.166|
                  |L9.236|
;;;849    	{
;;;850    		if (i == 0)
0000ec  2c00              CMP      r4,#0
0000ee  d060              BEQ      |L9.434|
;;;851    		{
;;;852    			LED_PWMUpdate(b_tabLED_Location[63],	0 ,0 ,0);
;;;853    			bIndexPrevious = bIndexCurrent = 0;
;;;854    		}
;;;855    		else
;;;856    		{
;;;857    			bIndexCurrent = i;
;;;858    			bIndexPrevious = i-1;
0000f0  1e60              SUBS     r0,r4,#1
0000f2  b2e5              UXTB     r5,r4                 ;857
0000f4  b2c0              UXTB     r0,r0
                  |L9.246|
;;;859    		}
;;;860    		
;;;861    		//Turn Off Previous RGB LED PWM value
;;;862    		LED_PWMUpdate(b_tabLED_Location[bIndexPrevious],	0 ,0 ,0);
0000f6  2300              MOVS     r3,#0
0000f8  5c38              LDRB     r0,[r7,r0]
0000fa  461a              MOV      r2,r3
0000fc  4619              MOV      r1,r3
0000fe  f7fffffe          BL       LED_PWMUpdate
;;;863    	
;;;864    		//Set RGB LED PWM value
;;;865    		bRed 	 = 0x00;	//**  LED_R
000102  2100              MOVS     r1,#0
;;;866    		bGreen  = 0x00;	//**  LED_G	
000104  460a              MOV      r2,r1
;;;867    		bBlue	 = 0xFF;	//**  LED_B
000106  23ff              MOVS     r3,#0xff
;;;868    	
;;;869    		LED_PWMUpdate(b_tabLED_Location[bIndexCurrent],	bRed ,bGreen ,bBlue);
000108  5d78              LDRB     r0,[r7,r5]
00010a  f7fffffe          BL       LED_PWMUpdate
;;;870    
;;;871    		//** Update LED Driver
;;;872    		SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
00010e  23c0              MOVS     r3,#0xc0
000110  2200              MOVS     r2,#0
000112  2101              MOVS     r1,#1
000114  9800              LDR      r0,[sp,#0]
000116  f7fffffe          BL       SPI_W_NBYTE
;;;873    		CLK_SysTickDelay(100000);
00011a  4630              MOV      r0,r6
00011c  f7fffffe          BL       CLK_SysTickDelay
000120  1c64              ADDS     r4,r4,#1
000122  2c40              CMP      r4,#0x40              ;848
000124  d3e2              BCC      |L9.236|
;;;874    	}
;;;875    	
;;;876    	//===============================//
;;;877    	//Start LED White light on Flow  //
;;;878    	//===============================//
;;;879    	
;;;880    	count = 0;
000126  2600              MOVS     r6,#0
                  |L9.296|
;;;881    	while(count<3)
;;;882    	{
;;;883    		for (i=0;i<=255;i++)
000128  2400              MOVS     r4,#0
;;;884    		{
;;;885    			//Set RGB LED PWM value
;;;886    			bRed 	 = i;	//**  LED_R
;;;887    			bGreen  = i;	//**  LED_G	
;;;888    			bBlue	 = i;	//**  LED_B
;;;889    			for (j=0;j<LED_LAYOUT_TOTAL_LED_NUMBERS;j++)
;;;890    				LED_PWMUpdate(b_tabLED_Location[j],	bRed ,bGreen ,bBlue);
;;;891    
;;;892    			//** Update LED Driver
;;;893    			SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
;;;894    			CLK_SysTickDelay(1000);
00012a  f44f787a          MOV      r8,#0x3e8
                  |L9.302|
00012e  f00409ff          AND      r9,r4,#0xff           ;886
000132  f0040aff          AND      r10,r4,#0xff          ;887
000136  f0040bff          AND      r11,r4,#0xff          ;888
00013a  2500              MOVS     r5,#0                 ;889
                  |L9.316|
00013c  465b              MOV      r3,r11                ;890
00013e  5d78              LDRB     r0,[r7,r5]            ;890
000140  4652              MOV      r2,r10                ;890
000142  4649              MOV      r1,r9                 ;890
000144  f7fffffe          BL       LED_PWMUpdate
000148  1c6d              ADDS     r5,r5,#1              ;890
00014a  2d40              CMP      r5,#0x40              ;889
00014c  d3f6              BCC      |L9.316|
00014e  23c0              MOVS     r3,#0xc0              ;893
000150  2200              MOVS     r2,#0                 ;893
000152  2101              MOVS     r1,#1                 ;893
000154  9800              LDR      r0,[sp,#0]            ;893
000156  f7fffffe          BL       SPI_W_NBYTE
00015a  4645              MOV      r5,r8
00015c  4640              MOV      r0,r8
00015e  f7fffffe          BL       CLK_SysTickDelay
000162  1c64              ADDS     r4,r4,#1
000164  2cff              CMP      r4,#0xff              ;883
000166  d9e2              BLS      |L9.302|
;;;895    		}
;;;896    		
;;;897    		for (i=0;i<=255;i++)
000168  2400              MOVS     r4,#0
00016a  46ab              MOV      r11,r5                ;894
                  |L9.364|
;;;898    		{
;;;899    			//Set RGB LED PWM value
;;;900    			bRed 	 = 255-i;	//**  LED_R
00016c  f1c400ff          RSB      r0,r4,#0xff
000170  f00009ff          AND      r9,r0,#0xff
;;;901    			bGreen  = 255-i;	//**  LED_G	
000174  f00008ff          AND      r8,r0,#0xff
;;;902    			bBlue	 = 255-i;	//**  LED_B
000178  f0000aff          AND      r10,r0,#0xff
;;;903    			for (j=0;j<LED_LAYOUT_TOTAL_LED_NUMBERS;j++)
00017c  2500              MOVS     r5,#0
                  |L9.382|
;;;904    				LED_PWMUpdate(b_tabLED_Location[j],	bRed ,bGreen ,bBlue);
00017e  4653              MOV      r3,r10
000180  5d78              LDRB     r0,[r7,r5]
000182  4642              MOV      r2,r8
000184  4649              MOV      r1,r9
000186  f7fffffe          BL       LED_PWMUpdate
00018a  1c6d              ADDS     r5,r5,#1
00018c  2d40              CMP      r5,#0x40              ;903
00018e  d3f6              BCC      |L9.382|
;;;905    
;;;906    			//** Update LED Driver
;;;907    			SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
000190  23c0              MOVS     r3,#0xc0
000192  2200              MOVS     r2,#0
000194  2101              MOVS     r1,#1
000196  9800              LDR      r0,[sp,#0]
000198  f7fffffe          BL       SPI_W_NBYTE
;;;908    			CLK_SysTickDelay(1000);
00019c  4658              MOV      r0,r11
00019e  f7fffffe          BL       CLK_SysTickDelay
0001a2  1c64              ADDS     r4,r4,#1
0001a4  2cff              CMP      r4,#0xff              ;897
0001a6  d9e1              BLS      |L9.364|
0001a8  1c76              ADDS     r6,r6,#1              ;897
0001aa  2e03              CMP      r6,#3                 ;881
0001ac  d3bc              BCC      |L9.296|
;;;909    		}
;;;910    	count++;
;;;911    	}
;;;912    }
0001ae  e8bd8ff8          POP      {r3-r11,pc}
                  |L9.434|
0001b2  2300              MOVS     r3,#0                 ;852
0001b4  461a              MOV      r2,r3                 ;852
0001b6  4619              MOV      r1,r3                 ;852
0001b8  203f              MOVS     r0,#0x3f              ;852
0001ba  f7fffffe          BL       LED_PWMUpdate
0001be  2000              MOVS     r0,#0                 ;853
0001c0  4605              MOV      r5,r0                 ;853
0001c2  e798              B        |L9.246|
;;;913    
                          ENDP

                  |L9.452|
                          DCD      ||.constdata||+0x100
                  |L9.456|
                          DCD      ||.bss||
                  |L9.460|
                          DCD      0x000186a0
                  |L9.464|
                          DCD      ||.constdata||

                          AREA ||i.LED_SnledType4Fun3||, CODE, READONLY, ALIGN=2

                  LED_SnledType4Fun3 PROC
;;;913    
;;;914    void LED_SnledType4Fun3(uint8_t idx)	//gradient , white
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;915    {
;;;916    	uint32_t i, j, count;
;;;917    //	uint8_t	bIndexPrevious, bIndexCurrent;
;;;918    	uint8_t	bRed, bGreen, bBlue;
;;;919    	
;;;920    	#if 1
;;;921    	// System must go to SW shutdowm mode
;;;922    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_SHUT_DOWN_MODE);
000004  2300              MOVS     r3,#0
000006  4683              MOV      r11,r0                ;915
000008  461a              MOV      r2,r3
00000a  2103              MOVS     r1,#3
00000c  f7fffffe          BL       SPI_W_3BYTE
;;;923    	
;;;924    	//=====================================//
;;;925    	//Set LED CTL Registers (Frame1Page) //
;;;926    	//=====================================//
;;;927    	for( i = 0; i< LED_CONTROL_ON_OFF_LENGTH ; i++)
;;;928    	{
;;;929    		b_arySPI_Tx_FIFO[i] = b_tabLED_Control_Map[i];	// setting 1~64 RGB LED CTL on
000010  492a              LDR      r1,|L10.188|
000012  4a2b              LDR      r2,|L10.192|
000014  2000              MOVS     r0,#0                 ;927
                  |L10.22|
000016  5c0b              LDRB     r3,[r1,r0]
000018  5413              STRB     r3,[r2,r0]
00001a  1c40              ADDS     r0,r0,#1
00001c  2818              CMP      r0,#0x18              ;927
00001e  d3fa              BCC      |L10.22|
;;;930    	}
;;;931    	SPI_W_NBYTE(idx, LED_CONTROL_PAGE, LED_CONTROL_ON_OFF_FIRST_ADDR, LED_CONTROL_PAGE_LENGTH);
000020  2200              MOVS     r2,#0
000022  2348              MOVS     r3,#0x48
000024  4611              MOV      r1,r2
000026  4658              MOV      r0,r11
000028  f7fffffe          BL       SPI_W_NBYTE
;;;932    	
;;;933    	//** Setting LED driver to normal mode 
;;;934    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_NORMAL_MODE);
00002c  2301              MOVS     r3,#1
00002e  2200              MOVS     r2,#0
000030  2103              MOVS     r1,#3
000032  4658              MOV      r0,r11
000034  f7fffffe          BL       SPI_W_3BYTE
;;;935    	#endif
;;;936    	
;;;937    	//===============================//
;;;938    	//Start LED White light on Flow  //
;;;939    	//===============================//
;;;940    	
;;;941    	count = 0;
;;;942    	while(count<1)
;;;943    	{
;;;944    		for (i=0;i<=255;i++)
;;;945    		{
;;;946    			//Set RGB LED PWM value
;;;947    			bRed 	 = i;	//**  LED_R
;;;948    			bGreen  = i;	//**  LED_G	
;;;949    			bBlue	 = i;	//**  LED_B
;;;950    			for (j=0;j<LED_LAYOUT_TOTAL_LED_NUMBERS;j++)
;;;951    				LED_PWMUpdate(b_tabLED_Location[j],	bRed ,bGreen ,bBlue);
000038  4f22              LDR      r7,|L10.196|
00003a  2600              MOVS     r6,#0                 ;941
                  |L10.60|
00003c  2400              MOVS     r4,#0                 ;944
                  |L10.62|
00003e  f0040aff          AND      r10,r4,#0xff          ;947
000042  f00409ff          AND      r9,r4,#0xff           ;948
000046  f00408ff          AND      r8,r4,#0xff           ;949
00004a  2500              MOVS     r5,#0                 ;950
                  |L10.76|
00004c  4643              MOV      r3,r8
00004e  5d78              LDRB     r0,[r7,r5]
000050  464a              MOV      r2,r9
000052  4651              MOV      r1,r10
000054  f7fffffe          BL       LED_PWMUpdate
000058  1c6d              ADDS     r5,r5,#1
00005a  2d40              CMP      r5,#0x40              ;950
00005c  d3f6              BCC      |L10.76|
;;;952    
;;;953    			//** Update LED Driver
;;;954    			SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
00005e  23c0              MOVS     r3,#0xc0
000060  2200              MOVS     r2,#0
000062  2101              MOVS     r1,#1
000064  4658              MOV      r0,r11
000066  f7fffffe          BL       SPI_W_NBYTE
;;;955    			CLK_SysTickDelay(60);
00006a  203c              MOVS     r0,#0x3c
00006c  f7fffffe          BL       CLK_SysTickDelay
000070  1c64              ADDS     r4,r4,#1
000072  2cff              CMP      r4,#0xff              ;944
000074  d9e3              BLS      |L10.62|
;;;956    		}
;;;957    		
;;;958    		for (i=0;i<=255;i++)
000076  2400              MOVS     r4,#0
                  |L10.120|
;;;959    		{
;;;960    			//Set RGB LED PWM value
;;;961    			bRed 	 = 255-i;	//**  LED_R
000078  f1c400ff          RSB      r0,r4,#0xff
00007c  f0000aff          AND      r10,r0,#0xff
;;;962    			bGreen  = 255-i;	//**  LED_G	
000080  f00009ff          AND      r9,r0,#0xff
;;;963    			bBlue	 = 255-i;	//**  LED_B
000084  f00008ff          AND      r8,r0,#0xff
;;;964    			for (j=0;j<LED_LAYOUT_TOTAL_LED_NUMBERS;j++)
000088  2500              MOVS     r5,#0
                  |L10.138|
;;;965    				LED_PWMUpdate(b_tabLED_Location[j],	bRed ,bGreen ,bBlue);
00008a  4643              MOV      r3,r8
00008c  5d78              LDRB     r0,[r7,r5]
00008e  464a              MOV      r2,r9
000090  4651              MOV      r1,r10
000092  f7fffffe          BL       LED_PWMUpdate
000096  1c6d              ADDS     r5,r5,#1
000098  2d40              CMP      r5,#0x40              ;964
00009a  d3f6              BCC      |L10.138|
;;;966    
;;;967    			//** Update LED Driver
;;;968    			SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
00009c  23c0              MOVS     r3,#0xc0
00009e  2200              MOVS     r2,#0
0000a0  2101              MOVS     r1,#1
0000a2  4658              MOV      r0,r11
0000a4  f7fffffe          BL       SPI_W_NBYTE
;;;969    			CLK_SysTickDelay(60);
0000a8  203c              MOVS     r0,#0x3c
0000aa  f7fffffe          BL       CLK_SysTickDelay
0000ae  1c64              ADDS     r4,r4,#1
0000b0  2cff              CMP      r4,#0xff              ;958
0000b2  d9e1              BLS      |L10.120|
0000b4  1c76              ADDS     r6,r6,#1              ;958
0000b6  d0c1              BEQ      |L10.60|
;;;970    		}
;;;971    	count++;
;;;972    	}
;;;973    }
0000b8  e8bd9ff0          POP      {r4-r12,pc}
;;;974    
                          ENDP

                  |L10.188|
                          DCD      ||.constdata||+0x100
                  |L10.192|
                          DCD      ||.bss||
                  |L10.196|
                          DCD      ||.constdata||

                          AREA ||i.LED_SnledType4Fun4||, CODE, READONLY, ALIGN=2

                  LED_SnledType4Fun4 PROC
;;;974    
;;;975    void LED_SnledType4Fun4(uint8_t idx)		// full white off
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;976    {
;;;977    	uint32_t i, j;
;;;978    //	uint8_t	bIndexPrevious, bIndexCurrent;
;;;979    	uint8_t	bRed, bGreen, bBlue;
;;;980    	
;;;981    	#if 1
;;;982    	// System must go to SW shutdowm mode
;;;983    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_SHUT_DOWN_MODE);
000004  2300              MOVS     r3,#0
000006  4681              MOV      r9,r0                 ;976
000008  461a              MOV      r2,r3
00000a  2103              MOVS     r1,#3
00000c  f7fffffe          BL       SPI_W_3BYTE
;;;984    	
;;;985    	//=====================================//
;;;986    	//Set LED CTL Registers (Frame1Page) //
;;;987    	//=====================================//
;;;988    	for( i = 0; i< LED_CONTROL_ON_OFF_LENGTH ; i++)
;;;989    	{
;;;990    		b_arySPI_Tx_FIFO[i] = b_tabLED_Control_Map[i];	// setting 1~64 RGB LED CTL on
000010  4916              LDR      r1,|L11.108|
000012  4a17              LDR      r2,|L11.112|
000014  2000              MOVS     r0,#0                 ;988
                  |L11.22|
000016  5c0b              LDRB     r3,[r1,r0]
000018  5413              STRB     r3,[r2,r0]
00001a  1c40              ADDS     r0,r0,#1
00001c  2818              CMP      r0,#0x18              ;988
00001e  d3fa              BCC      |L11.22|
;;;991    	}
;;;992    	SPI_W_NBYTE(idx, LED_CONTROL_PAGE, LED_CONTROL_ON_OFF_FIRST_ADDR, LED_CONTROL_PAGE_LENGTH);
000020  2200              MOVS     r2,#0
000022  2348              MOVS     r3,#0x48
000024  4611              MOV      r1,r2
000026  4648              MOV      r0,r9
000028  f7fffffe          BL       SPI_W_NBYTE
;;;993    	
;;;994    	//** Setting LED driver to normal mode 
;;;995    	SPI_W_3BYTE(idx, FUNCTION_PAGE,CONFIGURATION_REG, mskSW_NORMAL_MODE);
00002c  2301              MOVS     r3,#1
00002e  2200              MOVS     r2,#0
000030  2103              MOVS     r1,#3
000032  4648              MOV      r0,r9
000034  f7fffffe          BL       SPI_W_3BYTE
;;;996    	#endif
;;;997    	
;;;998    	//===============================//
;;;999    	//Start LED White light on Flow  //
;;;1000   	//===============================//
;;;1001   
;;;1002   	//Set RGB LED PWM value
;;;1003   	bRed 	= 0x00;	//**  LED_R
000038  f04f0800          MOV      r8,#0
;;;1004   	bGreen  	= 0x00;	//**  LED_G	
;;;1005   	bBlue	= 0x00;	//**  LED_B
;;;1006   	for (j=0;j<LED_LAYOUT_TOTAL_LED_NUMBERS;j++)
;;;1007   		LED_PWMUpdate(b_tabLED_Location[j],	bRed ,bGreen ,bBlue);
00003c  4d0d              LDR      r5,|L11.116|
00003e  4647              MOV      r7,r8                 ;1004
000040  4646              MOV      r6,r8                 ;1005
000042  4644              MOV      r4,r8                 ;1006
                  |L11.68|
000044  4633              MOV      r3,r6
000046  5d28              LDRB     r0,[r5,r4]
000048  463a              MOV      r2,r7
00004a  4641              MOV      r1,r8
00004c  f7fffffe          BL       LED_PWMUpdate
000050  1c64              ADDS     r4,r4,#1
000052  2c40              CMP      r4,#0x40              ;1006
000054  d3f6              BCC      |L11.68|
;;;1008   
;;;1009   	//** Update LED Driver
;;;1010   	SPI_W_NBYTE(idx, LED_PWM_PAGE, LED_PWM_FIRST_ADDR, LED_PWM_LENGTH);
000056  23c0              MOVS     r3,#0xc0
000058  2200              MOVS     r2,#0
00005a  2101              MOVS     r1,#1
00005c  4648              MOV      r0,r9
00005e  f7fffffe          BL       SPI_W_NBYTE
;;;1011   	CLK_SysTickDelay(60);
000062  e8bd47f0          POP      {r4-r10,lr}
000066  203c              MOVS     r0,#0x3c
000068  f7ffbffe          B.W      CLK_SysTickDelay
;;;1012   
;;;1013   
;;;1014   }
;;;1015   
                          ENDP

                  |L11.108|
                          DCD      ||.constdata||+0x100
                  |L11.112|
                          DCD      ||.bss||
                  |L11.116|
                          DCD      ||.constdata||

                          AREA ||i.SPI_R_NBYTE||, CODE, READONLY, ALIGN=2

                  SPI_R_NBYTE PROC
;;;280    
;;;281    void SPI_R_NBYTE(uint8_t idx ,uint8_t bPage, uint8_t bRegAddr, uint8_t blength)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;282    {	
;;;283    	volatile uint8_t	bDummyRead;
;;;284    	uint16_t i;
;;;285    	
;;;286        // /CS: active
;;;287    	switch(idx)
;;;288    	{
;;;289    		case SPI_LED0:
;;;290    			SPI_LED0_CS_LOW;		
000004  4d30              LDR      r5,|L12.200|
;;;291    			break;
;;;292    		case SPI_LED1:
;;;293    			SPI_LED1_CS_LOW;		
;;;294    			break;
;;;295    		case SPI_LED2:
;;;296    			SPI_LED2_CS_LOW;		
000006  4f30              LDR      r7,|L12.200|
;;;297    			break;
;;;298    		case SPI_LED3:
;;;299    			SPI_LED3_CS_LOW;		
000008  f8dfc0c0          LDR      r12,|L12.204|
00000c  1d2e              ADDS     r6,r5,#4              ;293
00000e  3714              ADDS     r7,r7,#0x14           ;296
;;;300    			break;
;;;301    		case SPI_LED4:
;;;302    			SPI_LED4_CS_LOW;		
000010  2400              MOVS     r4,#0
000012  f1ac0904          SUB      r9,r12,#4
000016  2805              CMP      r0,#5                 ;287
000018  d20f              BCS      |L12.58|
00001a  e8dff000          TBB      [pc,r0]               ;287
00001e  0305              DCB      0x03,0x05
000020  07090c00          DCB      0x07,0x09,0x0c,0x00
000024  602c              STR      r4,[r5,#0]            ;290
000026  e008              B        |L12.58|
000028  6034              STR      r4,[r6,#0]            ;293
00002a  e006              B        |L12.58|
00002c  603c              STR      r4,[r7,#0]            ;296
00002e  e004              B        |L12.58|
000030  f8cc4000          STR      r4,[r12,#0]           ;299
000034  e001              B        |L12.58|
000036  f8c94000          STR      r4,[r9,#0]
                  |L12.58|
;;;303    			break;	
;;;304    	}
;;;305    
;;;306    
;;;307    	while(!SPI_GET_TX_FIFO_EMPTY_FLAG(SPI_LED_PORT));
00003a  f8df8094          LDR      r8,|L12.208|
                  |L12.62|
00003e  f8d80014          LDR      r0,[r8,#0x14]
000042  03c0              LSLS     r0,r0,#15
000044  d5fb              BPL      |L12.62|
;;;308        SPI_WRITE_TX(SPI_LED_PORT, (0xA0|bPage));
000046  f04100a0          ORR      r0,r1,#0xa0
00004a  f8c80020          STR      r0,[r8,#0x20]
;;;309        SPI_WRITE_TX(SPI_LED_PORT, bRegAddr);	
00004e  f8c82020          STR      r2,[r8,#0x20]
                  |L12.82|
;;;310    
;;;311    	while(SPI_IS_BUSY(SPI_LED_PORT));
000052  f8d80014          LDR      r0,[r8,#0x14]
000056  07c0              LSLS     r0,r0,#31
000058  d1fb              BNE      |L12.82|
;;;312    	//** For SYNC SPI FIFO
;;;313    	bDummyRead = SPI_READ_RX(SPI_LED_PORT);	
00005a  f8d80030          LDR      r0,[r8,#0x30]
00005e  f88d0000          STRB     r0,[sp,#0]
;;;314    	bDummyRead = SPI_READ_RX(SPI_LED_PORT);		
000062  f8d80030          LDR      r0,[r8,#0x30]
000066  f88d0000          STRB     r0,[sp,#0]
;;;315    
;;;316    	for(i = 0;i < blength;i++)
00006a  2000              MOVS     r0,#0
;;;317    	{
;;;318        	SPI_WRITE_TX(SPI_LED_PORT, 0);		
;;;319    		while(SPI_IS_BUSY(SPI_LED_PORT));
;;;320    		while(SPI_GET_RX_FIFO_EMPTY_FLAG(SPI_LED_PORT));
;;;321    		//** For SYNC SPI FIFO
;;;322    		b_arySPI_Rx_FIFO[i] = SPI_READ_RX(SPI_LED_PORT);
00006c  4a19              LDR      r2,|L12.212|
00006e  e00e              B        |L12.142|
                  |L12.112|
000070  f8c84020          STR      r4,[r8,#0x20]         ;318
                  |L12.116|
000074  f8d81014          LDR      r1,[r8,#0x14]         ;319
000078  07c9              LSLS     r1,r1,#31             ;319
00007a  d1fb              BNE      |L12.116|
                  |L12.124|
00007c  f8d81014          LDR      r1,[r8,#0x14]         ;320
000080  05c9              LSLS     r1,r1,#23             ;320
000082  d4fb              BMI      |L12.124|
000084  f8d81030          LDR      r1,[r8,#0x30]
000088  5411              STRB     r1,[r2,r0]
00008a  1c40              ADDS     r0,r0,#1
00008c  b280              UXTH     r0,r0                 ;316
                  |L12.142|
00008e  4298              CMP      r0,r3                 ;316
000090  d3ee              BCC      |L12.112|
                  |L12.146|
;;;323    	}
;;;324    
;;;325    	while(SPI_IS_BUSY(SPI_LED_PORT));	
000092  f8d80014          LDR      r0,[r8,#0x14]
000096  07c0              LSLS     r0,r0,#31
000098  d1fb              BNE      |L12.146|
;;;326    
;;;327        // /CS: de-active
;;;328    	switch(SPI_LED_Num)
00009a  480f              LDR      r0,|L12.216|
00009c  7801              LDRB     r1,[r0,#0]  ; SPI_LED_Num
00009e  2001              MOVS     r0,#1                 ;282
0000a0  2905              CMP      r1,#5
0000a2  d205              BCS      |L12.176|
0000a4  e8dff001          TBB      [pc,r1]
0000a8  0306080a          DCB      0x03,0x06,0x08,0x0a
0000ac  0d00              DCB      0x0d,0x00
;;;329    	{
;;;330    		case SPI_LED0:
;;;331    			SPI_LED0_CS_HIGH;		
0000ae  6028              STR      r0,[r5,#0]
                  |L12.176|
;;;332    			break;
;;;333    		case SPI_LED1:
;;;334    			SPI_LED1_CS_HIGH;		
;;;335    			break;
;;;336    		case SPI_LED2:
;;;337    			SPI_LED2_CS_HIGH;		
;;;338    			break;
;;;339    		case SPI_LED3:
;;;340    			SPI_LED3_CS_HIGH;		
;;;341    			break;
;;;342    		case SPI_LED4:
;;;343    			SPI_LED4_CS_HIGH;		
;;;344    			break;	
;;;345    	}
;;;346    
;;;347    
;;;348    }
0000b0  e8bd83f8          POP      {r3-r9,pc}
0000b4  6030              STR      r0,[r6,#0]            ;334
0000b6  e7fb              B        |L12.176|
0000b8  6038              STR      r0,[r7,#0]            ;337
0000ba  e7f9              B        |L12.176|
0000bc  f8cc0000          STR      r0,[r12,#0]           ;340
0000c0  e7f6              B        |L12.176|
0000c2  f8c90000          STR      r0,[r9,#0]            ;343
0000c6  e7f3              B        |L12.176|
;;;349    
                          ENDP

                  |L12.200|
                          DCD      0x40004818
                  |L12.204|
                          DCD      0x40004944
                  |L12.208|
                          DCD      0x40061000
                  |L12.212|
                          DCD      ||.bss||+0xc0
                  |L12.216|
                          DCD      SPI_LED_Num

                          AREA ||i.SPI_W_3BYTE||, CODE, READONLY, ALIGN=2

                  SPI_W_3BYTE PROC
;;;144    
;;;145    void SPI_W_3BYTE(uint8_t idx ,uint8_t bPage, uint8_t bRegAddr, uint8_t bData)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;146    {		
000004  4699              MOV      r9,r3
;;;147    	volatile uint8_t bDummyRead;
;;;148    
;;;149        // /CS: active
;;;150    	switch(idx)
;;;151    	{
;;;152    		case SPI_LED0:
;;;153    			SPI_LED0_CS_LOW;		
000006  4b22              LDR      r3,|L13.144|
;;;154    			break;
;;;155    		case SPI_LED1:
;;;156    			SPI_LED1_CS_LOW;		
;;;157    			break;
;;;158    		case SPI_LED2:
;;;159    			SPI_LED2_CS_LOW;		
000008  4d21              LDR      r5,|L13.144|
;;;160    			break;
;;;161    		case SPI_LED3:
;;;162    			SPI_LED3_CS_LOW;		
00000a  4e22              LDR      r6,|L13.148|
00000c  1d1c              ADDS     r4,r3,#4              ;156
00000e  3514              ADDS     r5,r5,#0x14           ;159
;;;163    			break;
;;;164    		case SPI_LED4:
;;;165    			SPI_LED4_CS_LOW;		
000010  1f37              SUBS     r7,r6,#4
000012  f04f0c00          MOV      r12,#0                ;146
000016  2805              CMP      r0,#5                 ;150
000018  d212              BCS      |L13.64|
00001a  e8dff000          TBB      [pc,r0]               ;150
00001e  0306              DCB      0x03,0x06
000020  090c0f00          DCB      0x09,0x0c,0x0f,0x00
000024  f8c3c000          STR      r12,[r3,#0]           ;153
000028  e00a              B        |L13.64|
00002a  f8c4c000          STR      r12,[r4,#0]           ;156
00002e  e007              B        |L13.64|
000030  f8c5c000          STR      r12,[r5,#0]           ;159
000034  e004              B        |L13.64|
000036  f8c6c000          STR      r12,[r6,#0]           ;162
00003a  e001              B        |L13.64|
00003c  f8c7c000          STR      r12,[r7,#0]
                  |L13.64|
;;;166    			break;	
;;;167    	}
;;;168    
;;;169    
;;;170        SPI_WRITE_TX(SPI_LED_PORT, (0x20|bPage));
000040  4815              LDR      r0,|L13.152|
000042  f0410120          ORR      r1,r1,#0x20
000046  6201              STR      r1,[r0,#0x20]
;;;171        SPI_WRITE_TX(SPI_LED_PORT, bRegAddr);
000048  6202              STR      r2,[r0,#0x20]
;;;172        SPI_WRITE_TX(SPI_LED_PORT, bData);
00004a  f8c09020          STR      r9,[r0,#0x20]
                  |L13.78|
;;;173    
;;;174        // wait tx finish
;;;175        while(SPI_IS_BUSY(SPI_LED_PORT));
00004e  6941              LDR      r1,[r0,#0x14]
000050  07c9              LSLS     r1,r1,#31
000052  d1fc              BNE      |L13.78|
;;;176    
;;;177        // /CS: de-active
;;;178    	switch(SPI_LED_Num)
000054  4911              LDR      r1,|L13.156|
000056  780a              LDRB     r2,[r1,#0]  ; SPI_LED_Num
000058  2101              MOVS     r1,#1                 ;146
00005a  2a05              CMP      r2,#5
00005c  d20d              BCS      |L13.122|
00005e  e8dff002          TBB      [pc,r2]
000062  0305              DCB      0x03,0x05
000064  07090b00          DCB      0x07,0x09,0x0b,0x00
;;;179    	{
;;;180    		case SPI_LED0:
;;;181    			SPI_LED0_CS_HIGH;		
000068  6019              STR      r1,[r3,#0]
;;;182    			break;
00006a  e006              B        |L13.122|
;;;183    		case SPI_LED1:
;;;184    			SPI_LED1_CS_HIGH;		
00006c  6021              STR      r1,[r4,#0]
;;;185    			break;
00006e  e004              B        |L13.122|
;;;186    		case SPI_LED2:
;;;187    			SPI_LED2_CS_HIGH;		
000070  6029              STR      r1,[r5,#0]
;;;188    			break;
000072  e002              B        |L13.122|
;;;189    		case SPI_LED3:
;;;190    			SPI_LED3_CS_HIGH;		
000074  6031              STR      r1,[r6,#0]
;;;191    			break;
000076  e000              B        |L13.122|
;;;192    		case SPI_LED4:
;;;193    			SPI_LED4_CS_HIGH;		
000078  6039              STR      r1,[r7,#0]
                  |L13.122|
;;;194    			break;	
;;;195    	}
;;;196    
;;;197        // skip first rx data
;;;198    	bDummyRead = SPI_READ_RX(SPI_LED_PORT);
00007a  6b01              LDR      r1,[r0,#0x30]
00007c  f88d1000          STRB     r1,[sp,#0]
;;;199    	bDummyRead = SPI_READ_RX(SPI_LED_PORT);
000080  6b01              LDR      r1,[r0,#0x30]
000082  f88d1000          STRB     r1,[sp,#0]
;;;200    	bDummyRead = SPI_READ_RX(SPI_LED_PORT);
000086  6b00              LDR      r0,[r0,#0x30]
000088  f88d0000          STRB     r0,[sp,#0]
;;;201    
;;;202    }
00008c  e8bd83f8          POP      {r3-r9,pc}
;;;203    
                          ENDP

                  |L13.144|
                          DCD      0x40004818
                  |L13.148|
                          DCD      0x40004944
                  |L13.152|
                          DCD      0x40061000
                  |L13.156|
                          DCD      SPI_LED_Num

                          AREA ||i.SPI_W_NBYTE||, CODE, READONLY, ALIGN=2

                  SPI_W_NBYTE PROC
;;;203    
;;;204    void SPI_W_NBYTE(uint8_t idx ,uint8_t bPage, uint8_t bRegAddr, uint8_t blength)
000000  b478              PUSH     {r3-r6}
;;;205    {	
000002  4616              MOV      r6,r2
000004  2200              MOVS     r2,#0
;;;206    	volatile uint8_t	bDummyRead;
;;;207    //	uint16_t i;
;;;208    	
;;;209        // /CS: active
;;;210    	switch(idx)
000006  2805              CMP      r0,#5
000008  d209              BCS      |L14.30|
00000a  e8dff000          TBB      [pc,r0]
00000e  0305              DCB      0x03,0x05
000010  1e212300          DCB      0x1e,0x21,0x23,0x00
;;;211    	{
;;;212    		case SPI_LED0:
;;;213    			SPI_LED0_CS_LOW;		
000014  4c11              LDR      r4,|L14.92|
;;;214    			break;
000016  e001              B        |L14.28|
;;;215    		case SPI_LED1:
;;;216    			SPI_LED1_CS_LOW;		
000018  4c10              LDR      r4,|L14.92|
00001a  1d24              ADDS     r4,r4,#4
                  |L14.28|
00001c  6022              STR      r2,[r4,#0]            ;213
                  |L14.30|
;;;217    			break;
;;;218    		case SPI_LED2:
;;;219    			SPI_LED2_CS_LOW;		
;;;220    			break;
;;;221    		case SPI_LED3:
;;;222    			SPI_LED3_CS_LOW;		
;;;223    			break;
;;;224    		case SPI_LED4:
;;;225    			SPI_LED4_CS_LOW;		
;;;226    			break;	
;;;227    	}
;;;228    
;;;229    
;;;230    //	while(!SPI_GET_TX_FIFO_EMPTY_FLAG(SPI_LED_PORT));
;;;231        while(SPI_IS_BUSY(SPI_LED_PORT));
00001e  4c10              LDR      r4,|L14.96|
                  |L14.32|
000020  6965              LDR      r5,[r4,#0x14]
000022  07ed              LSLS     r5,r5,#31
000024  d1fc              BNE      |L14.32|
;;;232    	
;;;233        SPI_WRITE_TX(SPI_LED_PORT, (0x20|bPage));
000026  f0410120          ORR      r1,r1,#0x20
00002a  6221              STR      r1,[r4,#0x20]
;;;234        SPI_WRITE_TX(SPI_LED_PORT, bRegAddr);	
00002c  6226              STR      r6,[r4,#0x20]
                  |L14.46|
;;;235    
;;;236    //	while(!SPI_GET_TX_FIFO_EMPTY_FLAG(SPI_LED_PORT));
;;;237        while(SPI_IS_BUSY(SPI_LED_PORT));
00002e  6961              LDR      r1,[r4,#0x14]
000030  07c9              LSLS     r1,r1,#31
000032  d1fc              BNE      |L14.46|
;;;238    
;;;239    	//** For SYNC SPI FIFO
;;;240    	bDummyRead = SPI_READ_RX(SPI_LED_PORT);
000034  6b21              LDR      r1,[r4,#0x30]
000036  f88d1000          STRB     r1,[sp,#0]
;;;241    	bDummyRead = SPI_READ_RX(SPI_LED_PORT);	
00003a  6b21              LDR      r1,[r4,#0x30]
00003c  f88d1000          STRB     r1,[sp,#0]
;;;242    
;;;243    	#if 1
;;;244    	SpiLED_TX_PDMA(idx,b_arySPI_Tx_FIFO,blength);
000040  461a              MOV      r2,r3
000042  bc78              POP      {r3-r6}
000044  4907              LDR      r1,|L14.100|
000046  f7ffbffe          B.W      SpiLED_TX_PDMA
00004a  4c04              LDR      r4,|L14.92|
00004c  3414              ADDS     r4,r4,#0x14           ;219
00004e  e7e5              B        |L14.28|
000050  4c05              LDR      r4,|L14.104|
000052  e7e3              B        |L14.28|
000054  4c04              LDR      r4,|L14.104|
000056  1f24              SUBS     r4,r4,#4              ;225
000058  e7e0              B        |L14.28|
;;;245    
;;;246    
;;;247    	#else
;;;248    
;;;249    	for(i = 0;i < blength;i++)
;;;250    	{
;;;251    //		while(!SPI_GET_TX_FIFO_EMPTY_FLAG(SPI_LED_PORT));
;;;252        	while(SPI_IS_BUSY(SPI_LED_PORT));
;;;253    		SPI_WRITE_TX(SPI_LED_PORT, b_arySPI_Tx_FIFO[i]);
;;;254    		//** For SYNC SPI FIFO
;;;255    		bDummyRead = SPI_READ_RX(SPI_LED_PORT);
;;;256    	}
;;;257    	while(SPI_IS_BUSY(SPI_LED_PORT));
;;;258    	
;;;259        // /CS: de-active
;;;260    	switch(SPI_LED_Num)
;;;261    	{
;;;262    		case SPI_LED0:
;;;263    			SPI_LED0_CS_HIGH;		
;;;264    			break;
;;;265    		case SPI_LED1:
;;;266    			SPI_LED1_CS_HIGH;		
;;;267    			break;
;;;268    		case SPI_LED2:
;;;269    			SPI_LED2_CS_HIGH;		
;;;270    			break;
;;;271    		case SPI_LED3:
;;;272    			SPI_LED3_CS_HIGH;		
;;;273    			break;
;;;274    		case SPI_LED4:
;;;275    			SPI_LED4_CS_HIGH;		
;;;276    			break;	
;;;277    	}
;;;278    	#endif
;;;279    }
;;;280    
                          ENDP

00005a  0000              DCW      0x0000
                  |L14.92|
                          DCD      0x40004818
                  |L14.96|
                          DCD      0x40061000
                  |L14.100|
                          DCD      ||.bss||
                  |L14.104|
                          DCD      0x40004944

                          AREA ||i.SpiLED_Init||, CODE, READONLY, ALIGN=2

                  SpiLED_Init PROC
;;;102    
;;;103    void SpiLED_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;104    {
;;;105    
;;;106        /* Configure SPI_LED_PORT as a master, MSB first, 8-bit transaction, SPI Mode-0 timing, clock is 20MHz */
;;;107        SPI_Open(SPI_LED_PORT, SPI_MASTER, SPI_MODE_0, 8, SPI_LED_CLK_FREQ);
000002  4824              LDR      r0,|L15.148|
000004  9000              STR      r0,[sp,#0]
000006  2308              MOVS     r3,#8
000008  2204              MOVS     r2,#4
00000a  2100              MOVS     r1,#0
00000c  4822              LDR      r0,|L15.152|
00000e  f7fffffe          BL       SPI_Open
000012  2059              MOVS     r0,#0x59
000014  0784              LSLS     r4,r0,#30
000016  2116              MOVS     r1,#0x16
000018  2288              MOVS     r2,#0x88
                  |L15.26|
00001a  f8c40100          STR      r0,[r4,#0x100]
00001e  f8c41100          STR      r1,[r4,#0x100]
000022  f8c42100          STR      r2,[r4,#0x100]
000026  f8d43100          LDR      r3,[r4,#0x100]
00002a  2b00              CMP      r3,#0
00002c  d0f5              BEQ      |L15.26|
;;;108    
;;;109        SYS_UnlockReg();	
;;;110    	
;;;111        SYS->GPA_MFPL &= ~( SYS_GPA_MFPL_PA6MFP_Msk);	
00002e  6b20              LDR      r0,[r4,#0x30]
000030  f0206070          BIC      r0,r0,#0xf000000
000034  6320              STR      r0,[r4,#0x30]
;;;112        SYS->GPA_MFPL |=  SYS_GPA_MFPL_PA6MFP_GPIO;	
000036  6b20              LDR      r0,[r4,#0x30]
000038  6320              STR      r0,[r4,#0x30]
;;;113    	GPIO_SetMode(PA,BIT6,GPIO_MODE_OUTPUT);	
00003a  f04f2540          MOV      r5,#0x40004000
00003e  2201              MOVS     r2,#1
000040  2140              MOVS     r1,#0x40
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       GPIO_SetMode
;;;114    
;;;115        SYS->GPA_MFPL &= ~( SYS_GPA_MFPL_PA7MFP_Msk);	
000048  6b20              LDR      r0,[r4,#0x30]
00004a  f0204070          BIC      r0,r0,#0xf0000000
00004e  6320              STR      r0,[r4,#0x30]
;;;116        SYS->GPA_MFPL |=  SYS_GPA_MFPL_PA7MFP_GPIO;	
000050  6b20              LDR      r0,[r4,#0x30]
000052  6320              STR      r0,[r4,#0x30]
;;;117    	GPIO_SetMode(PA,BIT7,GPIO_MODE_OUTPUT);	
000054  2201              MOVS     r2,#1
000056  2180              MOVS     r1,#0x80
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       GPIO_SetMode
;;;118    
;;;119        SYS->GPA_MFPH &= ~( SYS_GPA_MFPH_PA11MFP_Msk);	
00005e  6b60              LDR      r0,[r4,#0x34]
000060  f4204070          BIC      r0,r0,#0xf000
000064  6360              STR      r0,[r4,#0x34]
;;;120        SYS->GPA_MFPH |=  SYS_GPA_MFPH_PA11MFP_GPIO;	
000066  6b60              LDR      r0,[r4,#0x34]
000068  6360              STR      r0,[r4,#0x34]
;;;121    	GPIO_SetMode(PA,BIT11,GPIO_MODE_OUTPUT);	
00006a  2201              MOVS     r2,#1
00006c  02d1              LSLS     r1,r2,#11
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       GPIO_SetMode
;;;122    
;;;123    	#if 0	// remove temporary for debug
;;;124        SYS->GPF_MFPL &= ~( SYS_GPF_MFPL_PF1MFP_Msk);	
;;;125        SYS->GPF_MFPL |=  SYS_GPF_MFPL_PF1MFP_GPIO;	
;;;126    	GPIO_SetMode(PF,BIT1,GPIO_MODE_OUTPUT);
;;;127    
;;;128        SYS->GPF_MFPL &= ~( SYS_GPF_MFPL_PF0MFP_Msk);	
;;;129        SYS->GPF_MFPL |=  SYS_GPF_MFPL_PF0MFP_GPIO;	
;;;130    	GPIO_SetMode(PF,BIT0,GPIO_MODE_OUTPUT);	
;;;131    	#endif
;;;132    
;;;133        SYS->GPC_MFPH &= ~( SYS_GPC_MFPH_PC14MFP_Msk);	
000074  6c60              LDR      r0,[r4,#0x44]
000076  f0206070          BIC      r0,r0,#0xf000000
00007a  6460              STR      r0,[r4,#0x44]
;;;134        SYS->GPC_MFPH |=  SYS_GPC_MFPH_PC14MFP_GPIO;	
00007c  6c60              LDR      r0,[r4,#0x44]
00007e  6460              STR      r0,[r4,#0x44]
;;;135    	GPIO_SetMode(PC,BIT14,GPIO_MODE_OUTPUT);
000080  2201              MOVS     r2,#1
000082  0391              LSLS     r1,r2,#14
000084  4805              LDR      r0,|L15.156|
000086  f7fffffe          BL       GPIO_SetMode
00008a  2000              MOVS     r0,#0
00008c  f8c40100          STR      r0,[r4,#0x100]
;;;136    	
;;;137        SYS_LockReg();	
;;;138    
;;;139    //	SPI_SET_SUSPEND_CYCLE(SPI_LED_PORT,2);
;;;140    
;;;141    }
000090  bd38              POP      {r3-r5,pc}
;;;142    
                          ENDP

000092  0000              DCW      0x0000
                  |L15.148|
                          DCD      0x00030d40
                  |L15.152|
                          DCD      0x40061000
                  |L15.156|
                          DCD      0x40004080

                          AREA ||i.SpiLED_TX_PDMA||, CODE, READONLY, ALIGN=2

                  SpiLED_TX_PDMA PROC
;;;26     */
;;;27     void SpiLED_TX_PDMA(uint8_t idx , uint8_t* Tx , uint16_t len)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;28     {
;;;29     	uint32_t u32RegValue = 0;
;;;30     	uint32_t u32Abort = 0;	
;;;31     
;;;32         PDMA_Open(PDMA, (1 << SPI_LED_TX_DMA_CH));
000004  4e31              LDR      r6,|L16.204|
000006  4688              MOV      r8,r1                 ;28
000008  4605              MOV      r5,r0                 ;28
00000a  f44f5480          MOV      r4,#0x1000
00000e  4617              MOV      r7,r2                 ;28
000010  4621              MOV      r1,r4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       PDMA_Open
;;;33     
;;;34     	//TX
;;;35         PDMA_SetTransferCnt(PDMA,SPI_LED_TX_DMA_CH, PDMA_WIDTH_8, len);
000018  463b              MOV      r3,r7
00001a  2200              MOVS     r2,#0
00001c  210c              MOVS     r1,#0xc
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       PDMA_SetTransferCnt
;;;36         /* Set source/destination address and attributes */
;;;37         PDMA_SetTransferAddr(PDMA,SPI_LED_TX_DMA_CH, (uint32_t)Tx, PDMA_SAR_INC, (uint32_t)&SPI_LED_PORT->TX, PDMA_DAR_FIX);
000024  f44f6140          MOV      r1,#0xc00
000028  4829              LDR      r0,|L16.208|
00002a  e9cd0100          STRD     r0,r1,[sp,#0]
00002e  2300              MOVS     r3,#0
000030  4642              MOV      r2,r8
000032  210c              MOVS     r1,#0xc
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       PDMA_SetTransferAddr
;;;38         /* Set request source; set basic mode. */
;;;39     	
;;;40         PDMA_SetTransferMode(PDMA,SPI_LED_TX_DMA_CH, PDMA_SPI0_TX, FALSE, 0);
00003a  2000              MOVS     r0,#0
00003c  4603              MOV      r3,r0
00003e  9000              STR      r0,[sp,#0]
000040  2216              MOVS     r2,#0x16
000042  210c              MOVS     r1,#0xc
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       PDMA_SetTransferMode
;;;41     	
;;;42         /* Single request type. SPI only support PDMA single request type. */
;;;43         PDMA_SetBurstType(PDMA,SPI_LED_TX_DMA_CH, PDMA_REQ_SINGLE, PDMA_BURST_128);
00004a  2300              MOVS     r3,#0
00004c  2204              MOVS     r2,#4
00004e  210c              MOVS     r1,#0xc
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       PDMA_SetBurstType
;;;44         /* Disable table interrupt */
;;;45         PDMA->DSCT[SPI_LED_TX_DMA_CH].CTL |= PDMA_DSCT_CTL_TBINTDIS_Msk;
000056  f8560fc0          LDR      r0,[r6,#0xc0]!
00005a  f0400080          ORR      r0,r0,#0x80
00005e  6030              STR      r0,[r6,#0]
;;;46     
;;;47         SPI_TRIGGER_TX_PDMA(SPI_LED_PORT);
000060  491b              LDR      r1,|L16.208|
000062  3920              SUBS     r1,r1,#0x20
000064  68c8              LDR      r0,[r1,#0xc]
000066  f0400001          ORR      r0,r0,#1
00006a  60c8              STR      r0,[r1,#0xc]
;;;48     
;;;49         while(1)
;;;50         {
;;;51             /* Get interrupt status */
;;;52             u32RegValue = PDMA_GET_INT_STATUS(PDMA);
;;;53             /* Check the DMA transfer done interrupt flag */
;;;54             if(u32RegValue & PDMA_INTSTS_TDIF_Msk)
;;;55             {
;;;56                 /* Check the PDMA transfer done interrupt flags */
;;;57                 if((PDMA_GET_TD_STS(PDMA) & (1 << SPI_LED_TX_DMA_CH)) == (1 << SPI_LED_TX_DMA_CH))
00006c  4b19              LDR      r3,|L16.212|
00006e  4819              LDR      r0,|L16.212|
000070  3308              ADDS     r3,r3,#8
                  |L16.114|
000072  6802              LDR      r2,[r0,#0]            ;52
000074  0796              LSLS     r6,r2,#30             ;54
000076  d5fc              BPL      |L16.114|
000078  681e              LDR      r6,[r3,#0]
00007a  04f6              LSLS     r6,r6,#19
00007c  d51e              BPL      |L16.188|
;;;58                 {
;;;59                     /* Clear the DMA transfer done flags */
;;;60                     PDMA_CLR_TD_FLAG(PDMA,1 << SPI_LED_TX_DMA_CH);
00007e  601c              STR      r4,[r3,#0]
;;;61                     /* Disable SPI PDMA TX function */
;;;62                     SPI_DISABLE_TX_PDMA(SPI_LED_PORT);
000080  68c8              LDR      r0,[r1,#0xc]
000082  f0200001          BIC      r0,r0,#1
000086  60c8              STR      r0,[r1,#0xc]
;;;63     
;;;64     				TIMER_Delay(TIMER0,500);
000088  f44f71fa          MOV      r1,#0x1f4
00008c  4812              LDR      r0,|L16.216|
00008e  f7fffffe          BL       TIMER_Delay
000092  2001              MOVS     r0,#1                 ;28
;;;65     				switch(idx)
000094  2d05              CMP      r5,#5
000096  d217              BCS      |L16.200|
000098  e8dff005          TBB      [pc,r5]
00009c  0305080b          DCB      0x03,0x05,0x08,0x0b
0000a0  0d00              DCB      0x0d,0x00
;;;66     				{
;;;67     					case SPI_LED0:
;;;68     						SPI_LED0_CS_HIGH;		
0000a2  490e              LDR      r1,|L16.220|
;;;69     						break;
0000a4  e00f              B        |L16.198|
;;;70     					case SPI_LED1:
;;;71     						SPI_LED1_CS_HIGH;		
0000a6  490d              LDR      r1,|L16.220|
0000a8  1d09              ADDS     r1,r1,#4
;;;72     						break;
0000aa  e00c              B        |L16.198|
;;;73     					case SPI_LED2:
;;;74     						SPI_LED2_CS_HIGH;		
0000ac  490b              LDR      r1,|L16.220|
0000ae  3114              ADDS     r1,r1,#0x14
;;;75     						break;
0000b0  e009              B        |L16.198|
;;;76     					case SPI_LED3:
;;;77     						SPI_LED3_CS_HIGH;		
0000b2  490b              LDR      r1,|L16.224|
;;;78     						break;
0000b4  e007              B        |L16.198|
;;;79     					case SPI_LED4:
;;;80     						SPI_LED4_CS_HIGH;		
0000b6  490a              LDR      r1,|L16.224|
0000b8  1f09              SUBS     r1,r1,#4
;;;81     						break;	
0000ba  e004              B        |L16.198|
                  |L16.188|
;;;82     				}
;;;83     				
;;;84                     break;
;;;85                 }
;;;86     
;;;87                 /* Check the DMA transfer abort interrupt flag */
;;;88                 if(u32RegValue & PDMA_INTSTS_ABTIF_Msk)
0000bc  07d2              LSLS     r2,r2,#31
0000be  d0d8              BEQ      |L16.114|
;;;89                 {
;;;90                     /* Get the target abort flag */
;;;91                     u32Abort = PDMA_GET_ABORT_STS(PDMA);
0000c0  4904              LDR      r1,|L16.212|
0000c2  1d09              ADDS     r1,r1,#4
0000c4  6808              LDR      r0,[r1,#0]
                  |L16.198|
;;;92                     /* Clear the target abort flag */
;;;93                     PDMA_CLR_ABORT_FLAG(PDMA,u32Abort);
0000c6  6008              STR      r0,[r1,#0]
                  |L16.200|
;;;94                     break;
;;;95                 }
;;;96             }
;;;97         }
;;;98     
;;;99     }
0000c8  e8bd81fc          POP      {r2-r8,pc}
;;;100    
                          ENDP

                  |L16.204|
                          DCD      0x40008000
                  |L16.208|
                          DCD      0x40061020
                  |L16.212|
                          DCD      0x4000841c
                  |L16.216|
                          DCD      0x40050000
                  |L16.220|
                          DCD      0x40004818
                  |L16.224|
                          DCD      0x40004944

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  b_arySPI_Tx_FIFO
                          %        192
                  b_arySPI_Rx_FIFO
                          %        192

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  b_tabLED_Location
000000  00010203          DCB      0x00,0x01,0x02,0x03
000004  04050607          DCB      0x04,0x05,0x06,0x07
000008  08090a0b          DCB      0x08,0x09,0x0a,0x0b
00000c  0c0d0e0f          DCB      0x0c,0x0d,0x0e,0x0f
000010  10111213          DCB      0x10,0x11,0x12,0x13
000014  14151617          DCB      0x14,0x15,0x16,0x17
000018  18191a1b          DCB      0x18,0x19,0x1a,0x1b
00001c  1c1d1e1f          DCB      0x1c,0x1d,0x1e,0x1f
000020  20212223          DCB      0x20,0x21,0x22,0x23
000024  24252627          DCB      0x24,0x25,0x26,0x27
000028  28292a2b          DCB      0x28,0x29,0x2a,0x2b
00002c  2c2d2e2f          DCB      0x2c,0x2d,0x2e,0x2f
000030  30313233          DCB      0x30,0x31,0x32,0x33
000034  34353637          DCB      0x34,0x35,0x36,0x37
000038  38393a3b          DCB      0x38,0x39,0x3a,0x3b
00003c  3c3d3e3f          DCB      0x3c,0x3d,0x3e,0x3f
                  b_tabRedLED_PWM_Location
000040  00010203          DCB      0x00,0x01,0x02,0x03
000044  04050607          DCB      0x04,0x05,0x06,0x07
000048  08090a0b          DCB      0x08,0x09,0x0a,0x0b
00004c  0c0d0e0f          DCB      0x0c,0x0d,0x0e,0x0f
000050  30313233          DCB      0x30,0x31,0x32,0x33
000054  34353637          DCB      0x34,0x35,0x36,0x37
000058  38393a3b          DCB      0x38,0x39,0x3a,0x3b
00005c  3c3d3e3f          DCB      0x3c,0x3d,0x3e,0x3f
000060  60616263          DCB      0x60,0x61,0x62,0x63
000064  64656667          DCB      0x64,0x65,0x66,0x67
000068  68696a6b          DCB      0x68,0x69,0x6a,0x6b
00006c  6c6d6e6f          DCB      0x6c,0x6d,0x6e,0x6f
000070  90919293          DCB      0x90,0x91,0x92,0x93
000074  94959697          DCB      0x94,0x95,0x96,0x97
000078  98999a9b          DCB      0x98,0x99,0x9a,0x9b
00007c  9c9d9e9f          DCB      0x9c,0x9d,0x9e,0x9f
                  b_tabGreenLED_PWM_Location
000080  10111213          DCB      0x10,0x11,0x12,0x13
000084  14151617          DCB      0x14,0x15,0x16,0x17
000088  18191a1b          DCB      0x18,0x19,0x1a,0x1b
00008c  1c1d1e1f          DCB      0x1c,0x1d,0x1e,0x1f
000090  40414243          DCB      0x40,0x41,0x42,0x43
000094  44454647          DCB      0x44,0x45,0x46,0x47
000098  48494a4b          DCB      0x48,0x49,0x4a,0x4b
00009c  4c4d4e4f          DCB      0x4c,0x4d,0x4e,0x4f
0000a0  70717273          DCB      0x70,0x71,0x72,0x73
0000a4  74757677          DCB      0x74,0x75,0x76,0x77
0000a8  78797a7b          DCB      0x78,0x79,0x7a,0x7b
0000ac  7c7d7e7f          DCB      0x7c,0x7d,0x7e,0x7f
0000b0  a0a1a2a3          DCB      0xa0,0xa1,0xa2,0xa3
0000b4  a4a5a6a7          DCB      0xa4,0xa5,0xa6,0xa7
0000b8  a8a9aaab          DCB      0xa8,0xa9,0xaa,0xab
0000bc  acadaeaf          DCB      0xac,0xad,0xae,0xaf
                  b_tabBlueLED_PWM_Location
0000c0  20212223          DCB      0x20,0x21,0x22,0x23
0000c4  24252627          DCB      0x24,0x25,0x26,0x27
0000c8  28292a2b          DCB      0x28,0x29,0x2a,0x2b
0000cc  2c2d2e2f          DCB      0x2c,0x2d,0x2e,0x2f
0000d0  50515253          DCB      0x50,0x51,0x52,0x53
0000d4  54555657          DCB      0x54,0x55,0x56,0x57
0000d8  58595a5b          DCB      0x58,0x59,0x5a,0x5b
0000dc  5c5d5e5f          DCB      0x5c,0x5d,0x5e,0x5f
0000e0  80818283          DCB      0x80,0x81,0x82,0x83
0000e4  84858687          DCB      0x84,0x85,0x86,0x87
0000e8  88898a8b          DCB      0x88,0x89,0x8a,0x8b
0000ec  8c8d8e8f          DCB      0x8c,0x8d,0x8e,0x8f
0000f0  b0b1b2b3          DCB      0xb0,0xb1,0xb2,0xb3
0000f4  b4b5b6b7          DCB      0xb4,0xb5,0xb6,0xb7
0000f8  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
0000fc  bcbdbebf          DCB      0xbc,0xbd,0xbe,0xbf
                  b_tabLED_Control_Map
000100  ffffffff          DCB      0xff,0xff,0xff,0xff
000104  ffffffff          DCB      0xff,0xff,0xff,0xff
000108  ffffffff          DCB      0xff,0xff,0xff,0xff
00010c  ffffffff          DCB      0xff,0xff,0xff,0xff
000110  ffffffff          DCB      0xff,0xff,0xff,0xff
000114  ffffffff          DCB      0xff,0xff,0xff,0xff

;*** Start embedded assembler ***

#line 1 "..\\LED_Function.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_LED_Function_c_5bf13ce5____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_LED_Function_c_5bf13ce5____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_LED_Function_c_5bf13ce5____REVSH|
#line 402
|__asm___14_LED_Function_c_5bf13ce5____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_LED_Function_c_5bf13ce5____RRX|
#line 587
|__asm___14_LED_Function_c_5bf13ce5____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
