; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\spi_flash.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi_flash.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\spi_flash.crf ..\SPI_Flash.c]
                          THUMB

                          AREA ||i.SpiFlash_ChipErase||, CODE, READONLY, ALIGN=2

                  SpiFlash_ChipErase PROC
;;;189    
;;;190    void SpiFlash_ChipErase(void)
000000  b510              PUSH     {r4,lr}
;;;191    {
;;;192    	SpiFlash_WriteEnable();
000002  f7fffffe          BL       SpiFlash_WriteEnable
;;;193    
;;;194        //////////////////////////////////////////
;;;195    
;;;196        // /CS: active
;;;197        SPI_FLASH_CS_LOW;
000006  4a07              LDR      r2,|L1.36|
000008  2000              MOVS     r0,#0
00000a  6010              STR      r0,[r2,#0]
;;;198    
;;;199        // send Command: 0xC7, Chip Erase
;;;200        SPI_WRITE_TX(SPI_FLASH_PORT, 0xC7);
00000c  4806              LDR      r0,|L1.40|
00000e  21c7              MOVS     r1,#0xc7
000010  6201              STR      r1,[r0,#0x20]
                  |L1.18|
;;;201    
;;;202        // wait tx finish
;;;203        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000012  6941              LDR      r1,[r0,#0x14]
000014  07c9              LSLS     r1,r1,#31
000016  d1fc              BNE      |L1.18|
;;;204    
;;;205        // /CS: de-active
;;;206        SPI_FLASH_CS_HIGH;
000018  2101              MOVS     r1,#1
00001a  6011              STR      r1,[r2,#0]
;;;207    
;;;208        SPI_ClearRxFIFO(SPI_FLASH_PORT);
00001c  e8bd4010          POP      {r4,lr}
000020  f7ffbffe          B.W      SPI_ClearRxFIFO
;;;209    
;;;210    }
;;;211    
                          ENDP

                  |L1.36|
                          DCD      0x40004958
                  |L1.40|
                          DCD      0x40063000

                          AREA ||i.SpiFlash_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  SpiFlash_Init PROC
;;;571    
;;;572    void SpiFlash_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;573    {
;;;574        uint16_t u16ID = 0;
;;;575        uint16_t i = 0;
;;;576    
;;;577        /* Configure SPI_FLASH_PORT as a master, MSB first, 8-bit transaction, SPI Mode-0 timing, clock is 20MHz */
;;;578        SPI_Open(SPI_FLASH_PORT, SPI_MASTER, SPI_MODE_0, 8, SPI_FLASH_CLK_FREQ);
000002  4822              LDR      r0,|L2.140|
000004  4d22              LDR      r5,|L2.144|
000006  9000              STR      r0,[sp,#0]
000008  2308              MOVS     r3,#8
00000a  2204              MOVS     r2,#4
00000c  2100              MOVS     r1,#0
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       SPI_Open
000014  2259              MOVS     r2,#0x59
000016  0794              LSLS     r4,r2,#30
000018  2016              MOVS     r0,#0x16
00001a  2188              MOVS     r1,#0x88
                  |L2.28|
00001c  f8c42100          STR      r2,[r4,#0x100]
000020  f8c40100          STR      r0,[r4,#0x100]
000024  f8c41100          STR      r1,[r4,#0x100]
000028  f8d43100          LDR      r3,[r4,#0x100]
00002c  2b00              CMP      r3,#0
00002e  d0f5              BEQ      |L2.28|
;;;579    
;;;580       	SYS_UnlockReg();	
;;;581    	
;;;582        SYS->GPF_MFPL &= ~( SYS_GPF_MFPL_PF6MFP_Msk);	
000030  6da0              LDR      r0,[r4,#0x58]
000032  f0206070          BIC      r0,r0,#0xf000000
000036  65a0              STR      r0,[r4,#0x58]
;;;583        SYS->GPF_MFPL |=  SYS_GPF_MFPL_PF6MFP_GPIO;
000038  6da0              LDR      r0,[r4,#0x58]
00003a  65a0              STR      r0,[r4,#0x58]
;;;584    	GPIO_SetMode(PF,BIT6,GPIO_MODE_OUTPUT);
00003c  2201              MOVS     r2,#1
00003e  2140              MOVS     r1,#0x40
000040  4814              LDR      r0,|L2.148|
000042  f7fffffe          BL       GPIO_SetMode
000046  2000              MOVS     r0,#0
000048  f8c40100          STR      r0,[r4,#0x100]
;;;585    	
;;;586        SYS_LockReg();	
;;;587    
;;;588        /* Disable auto SS function, control SS signal manually. */
;;;589        SPI_DisableAutoSS(SPI_FLASH_PORT);
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       SPI_DisableAutoSS
;;;590    	
;;;591    
;;;592    	u16ID = SpiFlash_ReadMidDid();
000052  f7fffffe          BL       SpiFlash_ReadMidDid
000056  4601              MOV      r1,r0
;;;593    	#if (_debug_log_UART_ == 1)	//debug
;;;594    	printf("ID : 0x%2X\r\n" , u16ID);
000058  a00f              ADR      r0,|L2.152|
00005a  f7fffffe          BL       __2printf
;;;595    	#endif
;;;596    
;;;597    	
;;;598    	//initial TX , RX data
;;;599        for (i=0; i < SPI_FLASH_PAGE_BYTE; i++)
00005e  2000              MOVS     r0,#0
;;;600        {
;;;601            TxBuffer[i] = 0xFF;
000060  4a11              LDR      r2,|L2.168|
;;;602            RxBuffer[i] = 0xFF;
000062  4b12              LDR      r3,|L2.172|
000064  21ff              MOVS     r1,#0xff              ;601
                  |L2.102|
000066  5411              STRB     r1,[r2,r0]            ;601
000068  5419              STRB     r1,[r3,r0]
00006a  1c40              ADDS     r0,r0,#1
00006c  b280              UXTH     r0,r0                 ;599
00006e  28ff              CMP      r0,#0xff              ;599
000070  d9f9              BLS      |L2.102|
;;;603        }
;;;604    
;;;605        for (i=0; i < SPI_FLASH_SECTOR_SIZE; i++)
;;;606        {
;;;607            Tx4KBuffer[i] = 0xFF;
000072  4a0f              LDR      r2,|L2.176|
;;;608            Rx4KBuffer[i] = 0xFF;
000074  4b0f              LDR      r3,|L2.180|
000076  2000              MOVS     r0,#0                 ;605
000078  f44f5480          MOV      r4,#0x1000            ;605
                  |L2.124|
00007c  5411              STRB     r1,[r2,r0]            ;607
00007e  5419              STRB     r1,[r3,r0]
000080  1c40              ADDS     r0,r0,#1
000082  b280              UXTH     r0,r0                 ;605
000084  42a0              CMP      r0,r4                 ;605
000086  d3f9              BCC      |L2.124|
;;;609        }
;;;610    	
;;;611    
;;;612    }
000088  bd38              POP      {r3-r5,pc}
;;;613    
                          ENDP

00008a  0000              DCW      0x0000
                  |L2.140|
                          DCD      0x00030d40
                  |L2.144|
                          DCD      0x40063000
                  |L2.148|
                          DCD      0x40004140
                  |L2.152|
000098  4944203a          DCB      "ID : 0x%2X\r\n",0
00009c  20307825
0000a0  32580d0a
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L2.168|
                          DCD      TxBuffer
                  |L2.172|
                          DCD      RxBuffer
                  |L2.176|
                          DCD      Tx4KBuffer
                  |L2.180|
                          DCD      Rx4KBuffer

                          AREA ||i.SpiFlash_NormalPageProgram||, CODE, READONLY, ALIGN=2

                  SpiFlash_NormalPageProgram PROC
;;;303    
;;;304    void SpiFlash_NormalPageProgram(uint32_t StartAddress, uint8_t *u8DataBuffer, uint16_t NumByteToWrite , uint8_t EnablePDMA)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;305    {
000004  4699              MOV      r9,r3
000006  4615              MOV      r5,r2
000008  460e              MOV      r6,r1
00000a  4603              MOV      r3,r0
;;;306        uint32_t i = 0;
00000c  2400              MOVS     r4,#0
;;;307    	
;;;308    	SpiFlash_WriteEnable();
00000e  f7fffffe          BL       SpiFlash_WriteEnable
;;;309    
;;;310        // /CS: active
;;;311        SPI_FLASH_CS_LOW;
000012  f8df805c          LDR      r8,|L3.112|
000016  2100              MOVS     r1,#0
000018  f8c81000          STR      r1,[r8,#0]
;;;312    
;;;313        // send Command: 0x02, Page program
;;;314        SPI_WRITE_TX(SPI_FLASH_PORT, 0x02);
00001c  4f15              LDR      r7,|L3.116|
00001e  2002              MOVS     r0,#2
000020  6238              STR      r0,[r7,#0x20]
;;;315    
;;;316        // send 24-bit start address
;;;317        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>16) & 0xFF);
000022  f3c34007          UBFX     r0,r3,#16,#8
000026  6238              STR      r0,[r7,#0x20]
;;;318        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>8)  & 0xFF);
000028  f3c32007          UBFX     r0,r3,#8,#8
00002c  6238              STR      r0,[r7,#0x20]
;;;319        SPI_WRITE_TX(SPI_FLASH_PORT, StartAddress       & 0xFF);
00002e  b2d8              UXTB     r0,r3
000030  6238              STR      r0,[r7,#0x20]
;;;320    
;;;321    
;;;322        // write data
;;;323    	if (EnablePDMA)
000032  f1b90f00          CMP      r9,#0
000036  d008              BEQ      |L3.74|
;;;324    	{
;;;325    		SpiFlash_TX_PDMA(u8DataBuffer , NumByteToWrite);
000038  4629              MOV      r1,r5
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       SpiFlash_TX_PDMA
000040  e010              B        |L3.100|
                  |L3.66|
;;;326    //		TIMER_Delay(TIMER0,500);		
;;;327    	}
;;;328    	else
;;;329    	{
;;;330    //	    while(1)
;;;331    //	    {
;;;332    //	        if(!SPI_GET_TX_FIFO_FULL_FLAG(SPI_FLASH_PORT))
;;;333    //	        {
;;;334    //				printf("%3d\r\n" , i);		
;;;335    //	            SPI_WRITE_TX(SPI_FLASH_PORT, u8DataBuffer[i++]);
;;;336    //	            if(i >= 255) break;				
;;;337    //	        }
;;;338    //	    }
;;;339    
;;;340    	    for(i = 0 ; i < NumByteToWrite ; i++)
;;;341    		{
;;;342    			SpiFlash_SendByte(u8DataBuffer[i]);
000042  5d30              LDRB     r0,[r6,r4]
000044  f7fffffe          BL       SpiFlash_SendByte
000048  1c64              ADDS     r4,r4,#1
                  |L3.74|
00004a  42ac              CMP      r4,r5                 ;340
00004c  d3f9              BCC      |L3.66|
                  |L3.78|
;;;343    		}
;;;344    
;;;345    	    // wait tx finish
;;;346    	    while(SPI_IS_BUSY(SPI_FLASH_PORT));
00004e  6978              LDR      r0,[r7,#0x14]
000050  07c0              LSLS     r0,r0,#31
000052  d1fc              BNE      |L3.78|
;;;347    		TIMER_Delay(TIMER0,500);
000054  f44f71fa          MOV      r1,#0x1f4
000058  4807              LDR      r0,|L3.120|
00005a  f7fffffe          BL       TIMER_Delay
;;;348    					
;;;349    	    // /CS: de-active
;;;350    	    SPI_FLASH_CS_HIGH;
00005e  2101              MOVS     r1,#1
000060  f8c81000          STR      r1,[r8,#0]
                  |L3.100|
;;;351    		
;;;352    	}
;;;353        SPI_ClearRxFIFO(SPI_FLASH_PORT);
000064  4638              MOV      r0,r7
000066  e8bd47f0          POP      {r4-r10,lr}
00006a  f7ffbffe          B.W      SPI_ClearRxFIFO
;;;354    
;;;355    }
;;;356    
                          ENDP

00006e  0000              DCW      0x0000
                  |L3.112|
                          DCD      0x40004958
                  |L3.116|
                          DCD      0x40063000
                  |L3.120|
                          DCD      0x40050000

                          AREA ||i.SpiFlash_NormalRead||, CODE, READONLY, ALIGN=2

                  SpiFlash_NormalRead PROC
;;;445    
;;;446    void SpiFlash_NormalRead(uint32_t StartAddress, uint8_t *u8DataBuffer , uint16_t NumByteToRead, uint8_t EnablePDMA)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;447    {
;;;448        uint32_t i = 0;
;;;449    
;;;450       // /CS: active
;;;451        SPI_FLASH_CS_LOW;
000004  4f1f              LDR      r7,|L4.132|
000006  460d              MOV      r5,r1                 ;447
000008  2600              MOVS     r6,#0
00000a  4699              MOV      r9,r3                 ;447
00000c  4614              MOV      r4,r2                 ;447
00000e  4601              MOV      r1,r0                 ;447
000010  603e              STR      r6,[r7,#0]
;;;452    
;;;453        // send Command: 0x03, Read data
;;;454        SPI_WRITE_TX(SPI_FLASH_PORT, 0x03);
000012  481d              LDR      r0,|L4.136|
000014  2203              MOVS     r2,#3
000016  6202              STR      r2,[r0,#0x20]
;;;455    
;;;456        // send 24-bit start address
;;;457        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>16) & 0xFF);
000018  f3c14207          UBFX     r2,r1,#16,#8
00001c  6202              STR      r2,[r0,#0x20]
;;;458        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>8)  & 0xFF);
00001e  f3c12207          UBFX     r2,r1,#8,#8
000022  6202              STR      r2,[r0,#0x20]
;;;459        SPI_WRITE_TX(SPI_FLASH_PORT, StartAddress       & 0xFF);
000024  b2c9              UXTB     r1,r1
000026  6201              STR      r1,[r0,#0x20]
                  |L4.40|
;;;460    
;;;461        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000028  6941              LDR      r1,[r0,#0x14]
00002a  07c9              LSLS     r1,r1,#31
00002c  d1fc              BNE      |L4.40|
;;;462        // clear RX buffer
;;;463        SPI_ClearRxFIFO(SPI_FLASH_PORT);
00002e  4680              MOV      r8,r0
000030  f7fffffe          BL       SPI_ClearRxFIFO
;;;464    
;;;465        // read data
;;;466        if (EnablePDMA)
000034  ea5f0009          MOVS     r0,r9
;;;467        {
;;;468    		SpiFlash_RX_PDMA(u8DataBuffer , NumByteToRead);
;;;469    		TIMER_Delay(TIMER0,500);
000038  f8dfa050          LDR      r10,|L4.140|
00003c  f44f79fa          MOV      r9,#0x1f4
000040  d009              BEQ      |L4.86|
000042  4621              MOV      r1,r4                 ;468
000044  4628              MOV      r0,r5                 ;468
000046  f7fffffe          BL       SpiFlash_RX_PDMA
00004a  4649              MOV      r1,r9
00004c  4650              MOV      r0,r10
00004e  e8bd47f0          POP      {r4-r10,lr}
000052  f7ffbffe          B.W      TIMER_Delay
                  |L4.86|
;;;470        }
;;;471    	else
;;;472    	{
;;;473    	    for(i = 0 ; i < NumByteToRead ; i++)
000056  2000              MOVS     r0,#0
000058  4641              MOV      r1,r8                 ;454
00005a  e006              B        |L4.106|
                  |L4.92|
;;;474    	    {
;;;475    	        SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
00005c  620e              STR      r6,[r1,#0x20]
                  |L4.94|
;;;476    	        while(SPI_IS_BUSY(SPI_FLASH_PORT));
00005e  694a              LDR      r2,[r1,#0x14]
000060  07d2              LSLS     r2,r2,#31
000062  d1fc              BNE      |L4.94|
;;;477    	        u8DataBuffer[i] = SPI_READ_RX(SPI_FLASH_PORT);
000064  6b0a              LDR      r2,[r1,#0x30]
000066  542a              STRB     r2,[r5,r0]
000068  1c40              ADDS     r0,r0,#1
                  |L4.106|
00006a  42a0              CMP      r0,r4                 ;473
00006c  d3f6              BCC      |L4.92|
                  |L4.110|
;;;478    	    }
;;;479    
;;;480    	    // wait tx finish
;;;481    	    while(SPI_IS_BUSY(SPI_FLASH_PORT));
00006e  6948              LDR      r0,[r1,#0x14]
000070  07c0              LSLS     r0,r0,#31
000072  d1fc              BNE      |L4.110|
;;;482    		TIMER_Delay(TIMER0,500);
000074  4649              MOV      r1,r9
000076  4650              MOV      r0,r10
000078  f7fffffe          BL       TIMER_Delay
;;;483    					
;;;484    	    // /CS: de-active
;;;485    	    SPI_FLASH_CS_HIGH;		
00007c  2001              MOVS     r0,#1
00007e  6038              STR      r0,[r7,#0]
;;;486    	}	
;;;487    }
000080  e8bd87f0          POP      {r4-r10,pc}
;;;488    
                          ENDP

                  |L4.132|
                          DCD      0x40004958
                  |L4.136|
                          DCD      0x40063000
                  |L4.140|
                          DCD      0x40050000

                          AREA ||i.SpiFlash_PageRead||, CODE, READONLY, ALIGN=1

                  SpiFlash_PageRead PROC
;;;488    
;;;489    void SpiFlash_PageRead(uint32_t page_no, uint8_t *u8DataBuffer , uint16_t NumByteToRead, uint8_t EnablePDMA)
000000  0200              LSLS     r0,r0,#8
;;;490    {
;;;491    	SpiFlash_NormalRead(page_no*SPI_FLASH_PAGE_BYTE , u8DataBuffer ,NumByteToRead, EnablePDMA);
000002  f7ffbffe          B.W      SpiFlash_NormalRead
;;;492    }
;;;493    
                          ENDP


                          AREA ||i.SpiFlash_PageWrite||, CODE, READONLY, ALIGN=1

                  SpiFlash_PageWrite PROC
;;;356    
;;;357    void SpiFlash_PageWrite(uint32_t page_no, uint8_t *u8DataBuffer , uint16_t NumByteToWrite , uint8_t EnablePDMA)
000000  b510              PUSH     {r4,lr}
;;;358    {
;;;359    	SpiFlash_NormalPageProgram(page_no*SPI_FLASH_PAGE_BYTE , u8DataBuffer ,NumByteToWrite, EnablePDMA);
000002  0200              LSLS     r0,r0,#8
000004  f7fffffe          BL       SpiFlash_NormalPageProgram
;;;360    	SpiFlash_WaitReady();
000008  e8bd4010          POP      {r4,lr}
00000c  f7ffbffe          B.W      SpiFlash_WaitReady
;;;361    }
;;;362    
                          ENDP


                          AREA ||i.SpiFlash_RX_PDMA||, CODE, READONLY, ALIGN=2

                  SpiFlash_RX_PDMA PROC
;;;11     
;;;12     void SpiFlash_RX_PDMA(uint8_t* Rx , uint16_t len)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;13     {
;;;14     	uint32_t u32RegValue = 0;
;;;15     	uint32_t u32Abort = 0;	
;;;16     	
;;;17         PDMA_Open(PDMA, (1 << SPI_FLASH_RX_DMA_CH));
000004  4e27              LDR      r6,|L7.164|
000006  460d              MOV      r5,r1                 ;13
000008  4607              MOV      r7,r0                 ;13
00000a  f44f4400          MOV      r4,#0x8000
00000e  4621              MOV      r1,r4
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       PDMA_Open
;;;18     
;;;19     	//RX	
;;;20         PDMA_SetTransferCnt(PDMA,SPI_FLASH_RX_DMA_CH, PDMA_WIDTH_8, len);
000016  462b              MOV      r3,r5
000018  2200              MOVS     r2,#0
00001a  210f              MOVS     r1,#0xf
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       PDMA_SetTransferCnt
;;;21         /* Set source/destination address and attributes */
;;;22         PDMA_SetTransferAddr(PDMA,SPI_FLASH_RX_DMA_CH, (uint32_t)&SPI_FLASH_PORT->RX, PDMA_SAR_FIX, (uint32_t)Rx, PDMA_DAR_INC);
000022  2500              MOVS     r5,#0
000024  e9cd7500          STRD     r7,r5,[sp,#0]
000028  f44f7340          MOV      r3,#0x300
00002c  4a1e              LDR      r2,|L7.168|
00002e  210f              MOVS     r1,#0xf
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       PDMA_SetTransferAddr
;;;23         /* Set request source; set basic mode. */
;;;24     
;;;25         PDMA_SetTransferMode(PDMA,SPI_FLASH_RX_DMA_CH, PDMA_SPI2_RX, FALSE, 0);
000036  2300              MOVS     r3,#0
000038  221b              MOVS     r2,#0x1b
00003a  210f              MOVS     r1,#0xf
00003c  4630              MOV      r0,r6
00003e  9500              STR      r5,[sp,#0]
000040  f7fffffe          BL       PDMA_SetTransferMode
;;;26     	
;;;27         /* Single request type. SPI only support PDMA single request type. */
;;;28         PDMA_SetBurstType(PDMA,SPI_FLASH_RX_DMA_CH, PDMA_REQ_SINGLE, PDMA_BURST_128);
000044  2300              MOVS     r3,#0
000046  2204              MOVS     r2,#4
000048  210f              MOVS     r1,#0xf
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       PDMA_SetBurstType
;;;29         /* Disable table interrupt */
;;;30         PDMA->DSCT[SPI_FLASH_RX_DMA_CH].CTL |= PDMA_DSCT_CTL_TBINTDIS_Msk;
000050  f8560ff0          LDR      r0,[r6,#0xf0]!
000054  f0400080          ORR      r0,r0,#0x80
000058  6030              STR      r0,[r6,#0]
;;;31     
;;;32         SPI_TRIGGER_RX_PDMA(SPI_FLASH_PORT);
00005a  4d13              LDR      r5,|L7.168|
00005c  3d30              SUBS     r5,r5,#0x30
00005e  68e8              LDR      r0,[r5,#0xc]
000060  f0400002          ORR      r0,r0,#2
000064  60e8              STR      r0,[r5,#0xc]
;;;33     
;;;34         while(1)
;;;35         {
;;;36             /* Get interrupt status */
;;;37             u32RegValue = PDMA_GET_INT_STATUS(PDMA);
;;;38             /* Check the DMA transfer done interrupt flag */
;;;39             if(u32RegValue & PDMA_INTSTS_TDIF_Msk)
;;;40             {
;;;41                 /* Check the PDMA transfer done interrupt flags */
;;;42                 if((PDMA_GET_TD_STS(PDMA) & (1 << SPI_FLASH_RX_DMA_CH)) == (1 << SPI_FLASH_RX_DMA_CH))
000066  4911              LDR      r1,|L7.172|
000068  4a10              LDR      r2,|L7.172|
00006a  3108              ADDS     r1,r1,#8
                  |L7.108|
00006c  6810              LDR      r0,[r2,#0]            ;37
00006e  0783              LSLS     r3,r0,#30             ;39
000070  d5fc              BPL      |L7.108|
000072  680b              LDR      r3,[r1,#0]
000074  041b              LSLS     r3,r3,#16
000076  d50c              BPL      |L7.146|
;;;43                 {
;;;44                     /* Clear the DMA transfer done flags */
;;;45                     PDMA_CLR_TD_FLAG(PDMA,1 << SPI_FLASH_RX_DMA_CH);
000078  600c              STR      r4,[r1,#0]
;;;46                     /* Disable SPI PDMA RX function */
;;;47                     SPI_DISABLE_RX_PDMA(SPI_FLASH_PORT);
00007a  68e8              LDR      r0,[r5,#0xc]
00007c  f0200002          BIC      r0,r0,#2
000080  60e8              STR      r0,[r5,#0xc]
;;;48     
;;;49     //				dump_buffer_hex(Rx,len);
;;;50     				
;;;51     				TIMER_Delay(TIMER0,500);
000082  f44f71fa          MOV      r1,#0x1f4
000086  480a              LDR      r0,|L7.176|
000088  f7fffffe          BL       TIMER_Delay
;;;52         			SPI_FLASH_CS_HIGH;				
00008c  2001              MOVS     r0,#1
00008e  4909              LDR      r1,|L7.180|
;;;53                     break;
000090  e004              B        |L7.156|
                  |L7.146|
;;;54                 }
;;;55     
;;;56                 /* Check the DMA transfer abort interrupt flag */
;;;57                 if(u32RegValue & PDMA_INTSTS_ABTIF_Msk)
000092  07c0              LSLS     r0,r0,#31
000094  d0ea              BEQ      |L7.108|
;;;58                 {
;;;59                     /* Get the target abort flag */
;;;60                     u32Abort = PDMA_GET_ABORT_STS(PDMA);
000096  4905              LDR      r1,|L7.172|
000098  1d09              ADDS     r1,r1,#4
00009a  6808              LDR      r0,[r1,#0]
                  |L7.156|
;;;61                     /* Clear the target abort flag */
;;;62                     PDMA_CLR_ABORT_FLAG(PDMA,u32Abort);
00009c  6008              STR      r0,[r1,#0]
;;;63                     break;
;;;64                 }
;;;65             }
;;;66         }
;;;67     
;;;68     }
00009e  e8bd81fc          POP      {r2-r8,pc}
;;;69     
                          ENDP

0000a2  0000              DCW      0x0000
                  |L7.164|
                          DCD      0x40008000
                  |L7.168|
                          DCD      0x40063030
                  |L7.172|
                          DCD      0x4000841c
                  |L7.176|
                          DCD      0x40050000
                  |L7.180|
                          DCD      0x40004958

                          AREA ||i.SpiFlash_ReadMidDid||, CODE, READONLY, ALIGN=2

                  SpiFlash_ReadMidDid PROC
;;;157    
;;;158    uint16_t SpiFlash_ReadMidDid(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;159    {
;;;160        uint8_t u8RxData[6], u8IDCnt = 0;
;;;161    
;;;162        // /CS: active
;;;163        SPI_FLASH_CS_LOW;
000002  4b0e              LDR      r3,|L8.60|
000004  2000              MOVS     r0,#0                 ;160
000006  6018              STR      r0,[r3,#0]
;;;164    
;;;165        // send Command: 0x90, Read Manufacturer/Device ID
;;;166        SPI_WRITE_TX(SPI_FLASH_PORT, 0x90);
000008  490d              LDR      r1,|L8.64|
00000a  2490              MOVS     r4,#0x90
00000c  620c              STR      r4,[r1,#0x20]
;;;167    
;;;168        // send 24-bit '0', dummy
;;;169        SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
00000e  6208              STR      r0,[r1,#0x20]
;;;170        SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
000010  6208              STR      r0,[r1,#0x20]
;;;171        SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
000012  6208              STR      r0,[r1,#0x20]
;;;172    
;;;173        // receive 16-bit
;;;174        SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
000014  6208              STR      r0,[r1,#0x20]
;;;175        SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
000016  6208              STR      r0,[r1,#0x20]
                  |L8.24|
;;;176    
;;;177        // wait tx finish
;;;178        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000018  694a              LDR      r2,[r1,#0x14]
00001a  07d2              LSLS     r2,r2,#31
00001c  d1fc              BNE      |L8.24|
;;;179    
;;;180        // /CS: de-active
;;;181        SPI_FLASH_CS_HIGH;
00001e  2201              MOVS     r2,#1
000020  601a              STR      r2,[r3,#0]
000022  466a              MOV      r2,sp                 ;160
;;;182    
;;;183        while(!SPI_GET_RX_FIFO_EMPTY_FLAG(SPI_FLASH_PORT))
000024  e003              B        |L8.46|
                  |L8.38|
;;;184            u8RxData[u8IDCnt ++] = SPI_READ_RX(SPI_FLASH_PORT);
000026  6b0b              LDR      r3,[r1,#0x30]
000028  5413              STRB     r3,[r2,r0]
00002a  1c40              ADDS     r0,r0,#1
00002c  b2c0              UXTB     r0,r0
                  |L8.46|
00002e  694b              LDR      r3,[r1,#0x14]         ;183
000030  05db              LSLS     r3,r3,#23             ;183
000032  d5f8              BPL      |L8.38|
;;;185    
;;;186    
;;;187        return ( (u8RxData[4]<<8) | u8RxData[5] );
000034  f8bd0004          LDRH     r0,[sp,#4]
000038  ba40              REV16    r0,r0
;;;188    }
00003a  bd1c              POP      {r2-r4,pc}
;;;189    
                          ENDP

                  |L8.60|
                          DCD      0x40004958
                  |L8.64|
                          DCD      0x40063000

                          AREA ||i.SpiFlash_ReadStatusReg||, CODE, READONLY, ALIGN=2

                  SpiFlash_ReadStatusReg PROC
;;;232    
;;;233    uint8_t SpiFlash_ReadStatusReg(void)
000000  4a07              LDR      r2,|L9.32|
;;;234    {
;;;235        // /CS: active
;;;236        SPI_FLASH_CS_LOW;
000002  2100              MOVS     r1,#0
000004  6011              STR      r1,[r2,#0]
;;;237    
;;;238        // send Command: 0x05, Read status register
;;;239        SPI_WRITE_TX(SPI_FLASH_PORT, 0x05);
000006  4807              LDR      r0,|L9.36|
000008  2305              MOVS     r3,#5
00000a  6203              STR      r3,[r0,#0x20]
;;;240    
;;;241        // read status
;;;242        SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
00000c  6201              STR      r1,[r0,#0x20]
                  |L9.14|
;;;243    
;;;244        // wait tx finish
;;;245        while(SPI_IS_BUSY(SPI_FLASH_PORT));
00000e  6941              LDR      r1,[r0,#0x14]
000010  07c9              LSLS     r1,r1,#31
000012  d1fc              BNE      |L9.14|
;;;246    
;;;247        // /CS: de-active
;;;248        SPI_FLASH_CS_HIGH;
000014  2101              MOVS     r1,#1
000016  6011              STR      r1,[r2,#0]
;;;249    
;;;250        // skip first rx data
;;;251        SPI_READ_RX(SPI_FLASH_PORT);
000018  6b01              LDR      r1,[r0,#0x30]
;;;252    
;;;253        return (SPI_READ_RX(SPI_FLASH_PORT) & 0xff);
00001a  6b00              LDR      r0,[r0,#0x30]
00001c  b2c0              UXTB     r0,r0
;;;254    	
;;;255    }
00001e  4770              BX       lr
;;;256    
                          ENDP

                  |L9.32|
                          DCD      0x40004958
                  |L9.36|
                          DCD      0x40063000

                          AREA ||i.SpiFlash_SectorErase||, CODE, READONLY, ALIGN=2

                  SpiFlash_SectorErase PROC
;;;211    
;;;212    void SpiFlash_SectorErase(uint32_t SectorAddr)
000000  b570              PUSH     {r4-r6,lr}
;;;213    {
000002  4604              MOV      r4,r0
;;;214    
;;;215    	SpiFlash_WriteEnable();
000004  f7fffffe          BL       SpiFlash_WriteEnable
;;;216    
;;;217        // /CS: active
;;;218        SPI_FLASH_CS_LOW;
000008  4d0b              LDR      r5,|L10.56|
00000a  2000              MOVS     r0,#0
00000c  6028              STR      r0,[r5,#0]
;;;219    
;;;220        SpiFlash_SendByte(0x20);
00000e  2020              MOVS     r0,#0x20
000010  f7fffffe          BL       SpiFlash_SendByte
;;;221    
;;;222        // send 24-bit start address
;;;223        SpiFlash_SendByte((SectorAddr & 0xFF0000) >> 16);
000014  f3c44007          UBFX     r0,r4,#16,#8
000018  f7fffffe          BL       SpiFlash_SendByte
;;;224        SpiFlash_SendByte((SectorAddr & 0xFF00) >> 8);
00001c  f3c42007          UBFX     r0,r4,#8,#8
000020  f7fffffe          BL       SpiFlash_SendByte
;;;225        SpiFlash_SendByte(SectorAddr & 0xFF);
000024  b2e0              UXTB     r0,r4
000026  f7fffffe          BL       SpiFlash_SendByte
;;;226    
;;;227        // /CS: de-active
;;;228        SPI_FLASH_CS_HIGH;
00002a  2001              MOVS     r0,#1
00002c  6028              STR      r0,[r5,#0]
;;;229    
;;;230    	SpiFlash_WaitReady();
00002e  e8bd4070          POP      {r4-r6,lr}
000032  f7ffbffe          B.W      SpiFlash_WaitReady
;;;231    }
;;;232    
                          ENDP

000036  0000              DCW      0x0000
                  |L10.56|
                          DCD      0x40004958

                          AREA ||i.SpiFlash_SectorRead||, CODE, READONLY, ALIGN=2

                  SpiFlash_SectorRead PROC
;;;493    
;;;494    void SpiFlash_SectorRead(uint32_t sector_no, uint8_t *u8DataBuffer , uint16_t NumByteToRead, uint8_t EnablePDMA)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;495    {
;;;496    
;;;497    	uint32_t ReadAddr = sector_no*SPI_FLASH_SECTOR_SIZE;
000004  0305              LSLS     r5,r0,#12
000006  461f              MOV      r7,r3                 ;495
000008  460e              MOV      r6,r1                 ;495
;;;498    	uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
;;;499    
;;;500    	Addr = ReadAddr % SPI_FLASH_PAGE_BYTE;
;;;501    	count = SPI_FLASH_PAGE_BYTE - Addr;
00000a  f44f7080          MOV      r0,#0x100
;;;502    	NumOfPage =  NumByteToRead / SPI_FLASH_PAGE_BYTE;
00000e  0a14              LSRS     r4,r2,#8
000010  d016              BEQ      |L11.64|
;;;503    	NumOfSingle = NumByteToRead % SPI_FLASH_PAGE_BYTE;
;;;504    
;;;505    	if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
;;;506    	{
;;;507    		if (NumOfPage == 0) /*!< SPI_FLASH_SECTOR_SIZE < sFLASH_PAGESIZE */
;;;508    		{
;;;509    			SpiFlash_NormalRead(ReadAddr,u8DataBuffer,  NumByteToRead, EnablePDMA);
;;;510    		}
;;;511    		else /*!< SPI_FLASH_SECTOR_SIZE > sFLASH_PAGESIZE */
;;;512    		{
;;;513    			while (NumOfPage--)
;;;514    			{
;;;515    //				printf("ReadAddr:0x%3X,NumOfPage:0x%2X,NumOfSingle:0x%2X,\r\n" , ReadAddr,NumOfPage,NumOfSingle);
;;;516    				TIMER_Delay(TIMER0,500);
000012  f8dfa03c          LDR      r10,|L11.80|
000016  f44f79fa          MOV      r9,#0x1f4
00001a  4680              MOV      r8,r0                 ;501
                  |L11.28|
00001c  1e64              SUBS     r4,r4,#1              ;513
00001e  b2a4              UXTH     r4,r4                 ;513
000020  d313              BCC      |L11.74|
000022  4649              MOV      r1,r9
000024  4650              MOV      r0,r10
000026  f7fffffe          BL       TIMER_Delay
;;;517    				
;;;518    				SpiFlash_NormalRead(ReadAddr,u8DataBuffer,  SPI_FLASH_PAGE_BYTE, EnablePDMA);
00002a  463b              MOV      r3,r7
00002c  4642              MOV      r2,r8
00002e  4631              MOV      r1,r6
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       SpiFlash_NormalRead
000036  f5057580          ADD      r5,r5,#0x100
00003a  f5067680          ADD      r6,r6,#0x100
;;;519    				ReadAddr +=  SPI_FLASH_PAGE_BYTE;
;;;520    				u8DataBuffer += SPI_FLASH_PAGE_BYTE;
00003e  e7ed              B        |L11.28|
                  |L11.64|
000040  4628              MOV      r0,r5                 ;509
000042  e8bd47f0          POP      {r4-r10,lr}           ;509
000046  f7ffbffe          B.W      SpiFlash_NormalRead
                  |L11.74|
;;;521    			}
;;;522    			
;;;523    //			TIMER_Delay(TIMER0,500);
;;;524    //			SpiFlash_NormalRead(ReadAddr,u8DataBuffer,  NumOfSingle, EnablePDMA);
;;;525    		}
;;;526    	}
;;;527    	else /*!< WriteAddr is not sFLASH_PAGESIZE aligned  */
;;;528    	{
;;;529    		if (NumOfPage == 0) /*!< SPI_FLASH_SECTOR_SIZE < sFLASH_PAGESIZE */
;;;530    		{
;;;531    			if (NumOfSingle > count) /*!< (SPI_FLASH_SECTOR_SIZE + WriteAddr) > sFLASH_PAGESIZE */
;;;532    			{
;;;533    				temp = NumOfSingle - count;
;;;534    
;;;535    				SpiFlash_NormalRead(ReadAddr,u8DataBuffer,  count, EnablePDMA);
;;;536    				ReadAddr +=  count;
;;;537    				u8DataBuffer += count;
;;;538    
;;;539    				SpiFlash_NormalRead(ReadAddr,u8DataBuffer,  temp, EnablePDMA);
;;;540    			}
;;;541    			else
;;;542    			{
;;;543    				SpiFlash_NormalRead(ReadAddr,u8DataBuffer,  NumByteToRead, EnablePDMA);
;;;544    			}
;;;545    		}
;;;546    		else /*!< SPI_FLASH_SECTOR_SIZE > sFLASH_PAGESIZE */
;;;547    		{
;;;548    			NumByteToRead -= count;
;;;549    			NumOfPage =  NumByteToRead / SPI_FLASH_PAGE_BYTE;
;;;550    			NumOfSingle = NumByteToRead % SPI_FLASH_PAGE_BYTE;
;;;551    
;;;552    			SpiFlash_NormalRead(ReadAddr,u8DataBuffer,  count, EnablePDMA);
;;;553    			ReadAddr +=  count;
;;;554    			u8DataBuffer += count;
;;;555    
;;;556    			while (NumOfPage--)
;;;557    			{
;;;558    				SpiFlash_NormalRead(ReadAddr,u8DataBuffer,  SPI_FLASH_PAGE_BYTE, EnablePDMA);
;;;559    				ReadAddr +=  SPI_FLASH_PAGE_BYTE;
;;;560    				u8DataBuffer += SPI_FLASH_PAGE_BYTE;
;;;561    			}
;;;562    
;;;563    			if (NumOfSingle != 0)
;;;564    			{
;;;565    				SpiFlash_NormalRead(ReadAddr,u8DataBuffer,  NumOfSingle, EnablePDMA);
;;;566    			}
;;;567    		}
;;;568    	}
;;;569     
;;;570    }
00004a  e8bd87f0          POP      {r4-r10,pc}
;;;571    
                          ENDP

00004e  0000              DCW      0x0000
                  |L11.80|
                          DCD      0x40050000

                          AREA ||i.SpiFlash_SectorWrite||, CODE, READONLY, ALIGN=2

                  SpiFlash_SectorWrite PROC
;;;362    
;;;363    void SpiFlash_SectorWrite(uint32_t sector_no, uint8_t *u8DataBuffer, uint16_t NumByteToWrite , uint8_t EnablePDMA)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;364    {
000004  4617              MOV      r7,r2
000006  460e              MOV      r6,r1
;;;365    	uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
;;;366    
;;;367    	uint32_t WriteAddr = sector_no*SPI_FLASH_SECTOR_SIZE ;
000008  0305              LSLS     r5,r0,#12
;;;368    
;;;369    	Addr = WriteAddr % SPI_FLASH_PAGE_BYTE;
;;;370    	count = SPI_FLASH_PAGE_BYTE - Addr;
00000a  f44f7880          MOV      r8,#0x100
;;;371    	NumOfPage =  NumByteToWrite / SPI_FLASH_PAGE_BYTE;
00000e  0a14              LSRS     r4,r2,#8
;;;372    	NumOfSingle = NumByteToWrite % SPI_FLASH_PAGE_BYTE;
000010  f00209ff          AND      r9,r2,#0xff
;;;373    
;;;374    //	printf("%s : Addr:0x%3X,count:0x%2X,NumOfPage:0x%2X,NumOfSingle:0x%2X,\r\n" ,__FUNCTION__ , Addr,count,NumOfPage,NumOfSingle);
;;;375    
;;;376    	SpiFlash_SectorErase(sector_no);
000014  f7fffffe          BL       SpiFlash_SectorErase
;;;377    
;;;378    	if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
000018  b1b4              CBZ      r4,|L12.72|
;;;379    	{
;;;380    		if (NumOfPage == 0) /*!< SPI_FLASH_SECTOR_SIZE < sFLASH_PAGESIZE */
;;;381    		{
;;;382    			SpiFlash_NormalPageProgram(WriteAddr,u8DataBuffer,  NumByteToWrite, EnablePDMA);
;;;383    		}
;;;384    		else /*!< SPI_FLASH_SECTOR_SIZE > sFLASH_PAGESIZE */
;;;385    		{
;;;386    			while (NumOfPage--)
;;;387    			{
;;;388    //				printf("WriteAddr:0x%3X,NumOfPage:0x%2X,NumOfSingle:0x%2X,\r\n" , WriteAddr,NumOfPage,NumOfSingle);
;;;389    				TIMER_Delay(TIMER0,500);
00001a  f8dfb048          LDR      r11,|L12.100|
00001e  f44f7afa          MOV      r10,#0x1f4
000022  4647              MOV      r7,r8                 ;370
                  |L12.36|
000024  1e64              SUBS     r4,r4,#1              ;386
000026  b2e4              UXTB     r4,r4                 ;386
000028  d311              BCC      |L12.78|
00002a  4651              MOV      r1,r10
00002c  4658              MOV      r0,r11
00002e  f7fffffe          BL       TIMER_Delay
;;;390    
;;;391    				SpiFlash_NormalPageProgram(WriteAddr,u8DataBuffer,  SPI_FLASH_PAGE_BYTE, EnablePDMA);
000032  463a              MOV      r2,r7
000034  4631              MOV      r1,r6
000036  4628              MOV      r0,r5
000038  9b03              LDR      r3,[sp,#0xc]
00003a  f7fffffe          BL       SpiFlash_NormalPageProgram
00003e  f5057580          ADD      r5,r5,#0x100
000042  f5067680          ADD      r6,r6,#0x100
;;;392    				WriteAddr +=  SPI_FLASH_PAGE_BYTE;
;;;393    				u8DataBuffer += SPI_FLASH_PAGE_BYTE;
000046  e7ed              B        |L12.36|
                  |L12.72|
000048  463a              MOV      r2,r7                 ;382
00004a  9b03              LDR      r3,[sp,#0xc]          ;382
00004c  e001              B        |L12.82|
                  |L12.78|
;;;394    			}
;;;395    
;;;396    			SpiFlash_NormalPageProgram(WriteAddr,u8DataBuffer,  NumOfSingle, EnablePDMA);
00004e  9b03              LDR      r3,[sp,#0xc]
000050  464a              MOV      r2,r9
                  |L12.82|
000052  4631              MOV      r1,r6                 ;382
000054  4628              MOV      r0,r5                 ;382
000056  f7fffffe          BL       SpiFlash_NormalPageProgram
;;;397    		}
;;;398    	}
;;;399    	else /*!< WriteAddr is not sFLASH_PAGESIZE aligned  */
;;;400    	{
;;;401    		if (NumOfPage == 0) /*!< SPI_FLASH_SECTOR_SIZE < sFLASH_PAGESIZE */
;;;402    		{
;;;403    			if (NumOfSingle > count) /*!< (SPI_FLASH_SECTOR_SIZE + WriteAddr) > sFLASH_PAGESIZE */
;;;404    			{
;;;405    				temp = NumOfSingle - count;
;;;406    
;;;407    				SpiFlash_NormalPageProgram(WriteAddr,u8DataBuffer,  count, EnablePDMA);
;;;408    				WriteAddr +=  count;
;;;409    				u8DataBuffer += count;
;;;410    
;;;411    				SpiFlash_NormalPageProgram(WriteAddr,u8DataBuffer,  temp, EnablePDMA);
;;;412    			}
;;;413    			else
;;;414    			{
;;;415    				SpiFlash_NormalPageProgram(WriteAddr,u8DataBuffer,  NumByteToWrite, EnablePDMA);
;;;416    			}
;;;417    		}
;;;418    		else /*!< SPI_FLASH_SECTOR_SIZE > sFLASH_PAGESIZE */
;;;419    		{
;;;420    			NumByteToWrite -= count;
;;;421    			NumOfPage =  NumByteToWrite / SPI_FLASH_PAGE_BYTE;
;;;422    			NumOfSingle = NumByteToWrite % SPI_FLASH_PAGE_BYTE;
;;;423    
;;;424    			SpiFlash_NormalPageProgram(WriteAddr,u8DataBuffer,  count, EnablePDMA);
;;;425    			WriteAddr +=  count;
;;;426    			u8DataBuffer += count;
;;;427    
;;;428    			while (NumOfPage--)
;;;429    			{
;;;430    				SpiFlash_NormalPageProgram(WriteAddr,u8DataBuffer,  SPI_FLASH_PAGE_BYTE, EnablePDMA);
;;;431    				WriteAddr +=  SPI_FLASH_PAGE_BYTE;
;;;432    				u8DataBuffer += SPI_FLASH_PAGE_BYTE;
;;;433    			}
;;;434    
;;;435    			if (NumOfSingle != 0)
;;;436    			{
;;;437    				SpiFlash_NormalPageProgram(WriteAddr,u8DataBuffer,  NumOfSingle, EnablePDMA);
;;;438    			}
;;;439    		}
;;;440    	}
;;;441    
;;;442    	SpiFlash_WaitReady();
00005a  e8bd5fff          POP      {r0-r12,lr}
00005e  f7ffbffe          B.W      SpiFlash_WaitReady
;;;443    	
;;;444    }
;;;445    
                          ENDP

000062  0000              DCW      0x0000
                  |L12.100|
                          DCD      0x40050000

                          AREA ||i.SpiFlash_SendByte||, CODE, READONLY, ALIGN=2

                  SpiFlash_SendByte PROC
;;;143    
;;;144    uint8_t SpiFlash_SendByte(uint8_t byte)
000000  b570              PUSH     {r4-r6,lr}
;;;145    {
;;;146    
;;;147    	/*!< Loop while DR register in not emplty */
;;;148    	while (SPI_GetStatus(SPI_FLASH_PORT, SPI_TX_EMPTY_MASK) == FALSE);
000002  4d09              LDR      r5,|L13.40|
000004  4604              MOV      r4,r0                 ;145
                  |L13.6|
000006  2108              MOVS     r1,#8
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       SPI_GetStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L13.6|
;;;149    	/*!< Send byte through the SPI1 peripheral */
;;;150    	SPI_WRITE_TX(SPI_FLASH_PORT, byte);
000012  622c              STR      r4,[r5,#0x20]
                  |L13.20|
;;;151    
;;;152    	/*!< Wait to receive a byte */
;;;153    	while (SPI_GetStatus(SPI_FLASH_PORT, SPI_RX_EMPTY_MASK) != FALSE);
000014  2102              MOVS     r1,#2
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       SPI_GetStatus
00001c  2800              CMP      r0,#0
00001e  d1f9              BNE      |L13.20|
;;;154    	/*!< Return the byte read from the SPI bus */
;;;155    	return SPI_READ_RX(SPI_FLASH_PORT);
000020  6b28              LDR      r0,[r5,#0x30]
000022  b2c0              UXTB     r0,r0
;;;156    }
000024  bd70              POP      {r4-r6,pc}
;;;157    
                          ENDP

000026  0000              DCW      0x0000
                  |L13.40|
                          DCD      0x40063000

                          AREA ||i.SpiFlash_TX_PDMA||, CODE, READONLY, ALIGN=2

                  SpiFlash_TX_PDMA PROC
;;;69     
;;;70     void SpiFlash_TX_PDMA(uint8_t* Tx , uint16_t len)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;71     {
;;;72     	uint32_t u32RegValue = 0;
;;;73     	uint32_t u32Abort = 0;	
;;;74     
;;;75     	SPI_FLASH_CS_LOW;
000004  4c28              LDR      r4,|L14.168|
000006  2700              MOVS     r7,#0
000008  4688              MOV      r8,r1                 ;71
00000a  4681              MOV      r9,r0                 ;71
00000c  6027              STR      r7,[r4,#0]
;;;76     
;;;77         PDMA_Open(PDMA, (1 << SPI_FLASH_TX_DMA_CH));
00000e  4e27              LDR      r6,|L14.172|
000010  1425              ASRS     r5,r4,#16
000012  4629              MOV      r1,r5
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       PDMA_Open
;;;78     
;;;79     	//TX
;;;80         PDMA_SetTransferCnt(PDMA,SPI_FLASH_TX_DMA_CH, PDMA_WIDTH_8, len);
00001a  4643              MOV      r3,r8
00001c  2200              MOVS     r2,#0
00001e  210e              MOVS     r1,#0xe
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       PDMA_SetTransferCnt
;;;81         /* Set source/destination address and attributes */
;;;82         PDMA_SetTransferAddr(PDMA,SPI_FLASH_TX_DMA_CH, (uint32_t)Tx, PDMA_SAR_INC, (uint32_t)&SPI_FLASH_PORT->TX, PDMA_DAR_FIX);
000026  f44f6140          MOV      r1,#0xc00
00002a  4821              LDR      r0,|L14.176|
00002c  e9cd0100          STRD     r0,r1,[sp,#0]
000030  2300              MOVS     r3,#0
000032  464a              MOV      r2,r9
000034  210e              MOVS     r1,#0xe
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       PDMA_SetTransferAddr
;;;83         /* Set request source; set basic mode. */
;;;84     	
;;;85         PDMA_SetTransferMode(PDMA,SPI_FLASH_TX_DMA_CH, PDMA_SPI2_TX, FALSE, 0);
00003c  2300              MOVS     r3,#0
00003e  221a              MOVS     r2,#0x1a
000040  210e              MOVS     r1,#0xe
000042  4630              MOV      r0,r6
000044  9700              STR      r7,[sp,#0]
000046  f7fffffe          BL       PDMA_SetTransferMode
;;;86     	
;;;87         /* Single request type. SPI only support PDMA single request type. */
;;;88         PDMA_SetBurstType(PDMA,SPI_FLASH_TX_DMA_CH, PDMA_REQ_SINGLE, PDMA_BURST_128);
00004a  2300              MOVS     r3,#0
00004c  2204              MOVS     r2,#4
00004e  210e              MOVS     r1,#0xe
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       PDMA_SetBurstType
;;;89         /* Disable table interrupt */
;;;90         PDMA->DSCT[SPI_FLASH_TX_DMA_CH].CTL |= PDMA_DSCT_CTL_TBINTDIS_Msk;
000056  f8560fe0          LDR      r0,[r6,#0xe0]!
00005a  f0400080          ORR      r0,r0,#0x80
00005e  6030              STR      r0,[r6,#0]
;;;91     
;;;92         SPI_TRIGGER_TX_PDMA(SPI_FLASH_PORT);
000060  4b13              LDR      r3,|L14.176|
000062  3b20              SUBS     r3,r3,#0x20
000064  68d8              LDR      r0,[r3,#0xc]
000066  f0400001          ORR      r0,r0,#1
00006a  60d8              STR      r0,[r3,#0xc]
;;;93     
;;;94         while(1)
;;;95         {
;;;96             /* Get interrupt status */
;;;97             u32RegValue = PDMA_GET_INT_STATUS(PDMA);
;;;98             /* Check the DMA transfer done interrupt flag */
;;;99             if(u32RegValue & PDMA_INTSTS_TDIF_Msk)
;;;100            {
;;;101                /* Check the PDMA transfer done interrupt flags */
;;;102                if((PDMA_GET_TD_STS(PDMA) & (1 << SPI_FLASH_TX_DMA_CH)) == (1 << SPI_FLASH_TX_DMA_CH))
00006c  4a11              LDR      r2,|L14.180|
00006e  4911              LDR      r1,|L14.180|
000070  3208              ADDS     r2,r2,#8
                  |L14.114|
000072  6808              LDR      r0,[r1,#0]            ;97
000074  0786              LSLS     r6,r0,#30             ;99
000076  d5fc              BPL      |L14.114|
000078  6816              LDR      r6,[r2,#0]
00007a  0476              LSLS     r6,r6,#17
00007c  d50d              BPL      |L14.154|
;;;103                {
;;;104                    /* Clear the DMA transfer done flags */
;;;105                    PDMA_CLR_TD_FLAG(PDMA,1 << SPI_FLASH_TX_DMA_CH);
00007e  6015              STR      r5,[r2,#0]
;;;106                    /* Disable SPI PDMA TX function */
;;;107                    SPI_DISABLE_TX_PDMA(SPI_FLASH_PORT);
000080  68d8              LDR      r0,[r3,#0xc]
000082  f0200001          BIC      r0,r0,#1
000086  60d8              STR      r0,[r3,#0xc]
;;;108    
;;;109    				TIMER_Delay(TIMER0,500);				
000088  f44f71fa          MOV      r1,#0x1f4
00008c  480a              LDR      r0,|L14.184|
00008e  f7fffffe          BL       TIMER_Delay
;;;110    				SPI_FLASH_CS_HIGH;
000092  2001              MOVS     r0,#1
000094  6020              STR      r0,[r4,#0]
                  |L14.150|
;;;111    				
;;;112                    break;
;;;113                }
;;;114    
;;;115                /* Check the DMA transfer abort interrupt flag */
;;;116                if(u32RegValue & PDMA_INTSTS_ABTIF_Msk)
;;;117                {
;;;118                    /* Get the target abort flag */
;;;119                    u32Abort = PDMA_GET_ABORT_STS(PDMA);
;;;120                    /* Clear the target abort flag */
;;;121                    PDMA_CLR_ABORT_FLAG(PDMA,u32Abort);
;;;122                    break;
;;;123                }
;;;124            }
;;;125        }
;;;126    
;;;127    }
000096  e8bd87fc          POP      {r2-r10,pc}
                  |L14.154|
00009a  07c0              LSLS     r0,r0,#31             ;116
00009c  d0e9              BEQ      |L14.114|
00009e  4905              LDR      r1,|L14.180|
0000a0  1d09              ADDS     r1,r1,#4              ;119
0000a2  6808              LDR      r0,[r1,#0]            ;119
0000a4  6008              STR      r0,[r1,#0]            ;121
0000a6  e7f6              B        |L14.150|
;;;128    
                          ENDP

                  |L14.168|
                          DCD      0x40004958
                  |L14.172|
                          DCD      0x40008000
                  |L14.176|
                          DCD      0x40063020
                  |L14.180|
                          DCD      0x4000841c
                  |L14.184|
                          DCD      0x40050000

                          AREA ||i.SpiFlash_WaitReady||, CODE, READONLY, ALIGN=1

                  SpiFlash_WaitReady PROC
;;;279    
;;;280    void SpiFlash_WaitReady(void)
000000  b500              PUSH     {lr}
                  |L15.2|
;;;281    {
;;;282        uint8_t ReturnValue = 0;
;;;283    //    uint32_t cnt = 0;
;;;284    	
;;;285        do
;;;286        {
;;;287            ReturnValue = SpiFlash_ReadStatusReg();
000002  f7fffffe          BL       SpiFlash_ReadStatusReg
;;;288            ReturnValue = ReturnValue & 1;
000006  f0100f01          TST      r0,#1
;;;289    
;;;290    		#if 0	//debug purpose
;;;291    		printf("BUSY counter : %4d\r\n" , cnt++);
;;;292    //		printf(".");
;;;293    		
;;;294    		#endif
;;;295    
;;;296        }
;;;297        while(ReturnValue!=0);   // check the BUSY bit
00000a  d1fa              BNE      |L15.2|
;;;298    
;;;299    //	#if (_debug_log_UART_ == 1)	//debug
;;;300    //	printf("\r\n");
;;;301    //	#endif
;;;302    }
00000c  bd00              POP      {pc}
;;;303    
                          ENDP


                          AREA ||i.SpiFlash_WriteEnable||, CODE, READONLY, ALIGN=2

                  SpiFlash_WriteEnable PROC
;;;128    
;;;129    void SpiFlash_WriteEnable(void)
000000  4a05              LDR      r2,|L16.24|
;;;130    {
;;;131        // /CS: active
;;;132        SPI_FLASH_CS_LOW;
000002  2000              MOVS     r0,#0
000004  6010              STR      r0,[r2,#0]
;;;133    
;;;134        // send Command: 0x06, Write enable
;;;135        SPI_WRITE_TX(SPI_FLASH_PORT, 0x06);
000006  4805              LDR      r0,|L16.28|
000008  2106              MOVS     r1,#6
00000a  6201              STR      r1,[r0,#0x20]
                  |L16.12|
;;;136    
;;;137        // wait tx finish
;;;138        while(SPI_IS_BUSY(SPI_FLASH_PORT));
00000c  6941              LDR      r1,[r0,#0x14]
00000e  07c9              LSLS     r1,r1,#31
000010  d1fc              BNE      |L16.12|
;;;139    
;;;140        // /CS: de-active
;;;141        SPI_FLASH_CS_HIGH;
000012  2001              MOVS     r0,#1
000014  6010              STR      r0,[r2,#0]
;;;142    }
000016  4770              BX       lr
;;;143    
                          ENDP

                  |L16.24|
                          DCD      0x40004958
                  |L16.28|
                          DCD      0x40063000

                          AREA ||i.SpiFlash_WriteStatusReg||, CODE, READONLY, ALIGN=2

                  SpiFlash_WriteStatusReg PROC
;;;256    
;;;257    void SpiFlash_WriteStatusReg(uint8_t u8Value)
000000  b510              PUSH     {r4,lr}
;;;258    {
000002  4603              MOV      r3,r0
;;;259    	SpiFlash_WriteEnable();
000004  f7fffffe          BL       SpiFlash_WriteEnable
;;;260    
;;;261        ///////////////////////////////////////
;;;262    
;;;263        // /CS: active
;;;264        SPI_FLASH_CS_LOW;
000008  4c05              LDR      r4,|L17.32|
00000a  2000              MOVS     r0,#0
00000c  6020              STR      r0,[r4,#0]
;;;265    
;;;266        // send Command: 0x01, Write status register
;;;267        SPI_WRITE_TX(SPI_FLASH_PORT, 0x01);
00000e  4905              LDR      r1,|L17.36|
000010  2201              MOVS     r2,#1
000012  620a              STR      r2,[r1,#0x20]
;;;268    
;;;269        // write status
;;;270        SPI_WRITE_TX(SPI_FLASH_PORT, u8Value);
000014  620b              STR      r3,[r1,#0x20]
                  |L17.22|
;;;271    
;;;272        // wait tx finish
;;;273        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000016  6948              LDR      r0,[r1,#0x14]
000018  07c0              LSLS     r0,r0,#31
00001a  d1fc              BNE      |L17.22|
;;;274    
;;;275        // /CS: de-active
;;;276        SPI_FLASH_CS_HIGH;
00001c  6022              STR      r2,[r4,#0]
;;;277    
;;;278    }
00001e  bd10              POP      {r4,pc}
;;;279    
                          ENDP

                  |L17.32|
                          DCD      0x40004958
                  |L17.36|
                          DCD      0x40063000

;*** Start embedded assembler ***

#line 1 "..\\SPI_Flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_SPI_Flash_c_e81207a2____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_SPI_Flash_c_e81207a2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_SPI_Flash_c_e81207a2____REVSH|
#line 402
|__asm___11_SPI_Flash_c_e81207a2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_SPI_Flash_c_e81207a2____RRX|
#line 587
|__asm___11_SPI_Flash_c_e81207a2____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
